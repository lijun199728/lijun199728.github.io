<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前后端身份验证</title>
    <link href="/2021/02/27/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/"/>
    <url>/2021/02/27/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h2 id="在Express中使用session认证"><a href="#在Express中使用session认证" class="headerlink" title="在Express中使用session认证"></a>在Express中使用session认证</h2><p>session认证机制:用户在客户端进行登录，服务端验证用户的登录信息，并生成cookie开辟一块空间将用户的信息与之对应存储在客户端，通过响应头的方式将cookie返回给客户端，客户端将服务端返回的cookie存储在session中，当用户再次发送请求时会主动已请求头的方式将cookie发送给服务端，服务器根据cookie验证用户的信息，如果验证成功就会返回用户信息的请求信息。</p><h3 id="下载express-session包"><a href="#下载express-session包" class="headerlink" title="下载express-session包"></a>下载express-session包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install express-session<br></code></pre></td></tr></table></figure><h3 id="导入express-seesion包"><a href="#导入express-seesion包" class="headerlink" title="导入express-seesion包"></a>导入express-seesion包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-seesion&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="注册全局session中间件并配置"><a href="#注册全局session中间件并配置" class="headerlink" title="注册全局session中间件并配置"></a>注册全局session中间件并配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(session(&#123;<br>  secret: <span class="hljs-string">&#x27;keyboard cat&#x27;</span>,<br>  resave: <span class="hljs-literal">false</span>,<br>  saveUninitialized: <span class="hljs-literal">true</span><br>&#125;))<br></code></pre></td></tr></table></figure><h3 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">app.post(<span class="hljs-string">&#x27;/api/login&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>  <span class="hljs-keyword">if</span>(req.body.username!==<span class="hljs-string">&#x27;admin&#x27;</span>&amp;&amp;req.body.password!==<span class="hljs-string">&#x27;000000&#x27;</span>)&#123;<br>       <span class="hljs-keyword">return</span> res.send(&#123;<br>           status:<span class="hljs-number">1</span>,<br>           message:<span class="hljs-string">&#x27;登录失败！&#x27;</span><br>               &#125;)<br>   &#125;<br>    <span class="hljs-comment">// TODO_02：请将登录成功后的用户信息，保存到 Session 中</span><br>    req.session.user = req.body<br>    req.session.islogin = <span class="hljs-literal">true</span><br>    <br>    res.send(&#123; <span class="hljs-attr">status</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;登录成功&#x27;</span> &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取用户姓名的接口</span><br>app.get(<span class="hljs-string">&#x27;/api/username&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><br>    <span class="hljs-comment">// TODO_03：请从 Session 中获取用户的名称，响应给客户端</span><br>    <span class="hljs-keyword">if</span> (req.session.islogin != <span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">return</span> res.send(&#123;<br>            status: <span class="hljs-number">1</span>,<br>            message: <span class="hljs-string">&#x27;获取用户信息失败!&#x27;</span><br>        &#125;)<br>    &#125;<br><br>    res.send(&#123; <span class="hljs-attr">status</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">username</span>: req.session.user.username &#125;)<br><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">/ 退出登录的接口<br>app.post(<span class="hljs-string">&#x27;/api/logout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><br>    <span class="hljs-comment">// TODO_04：清空 Session 信息</span><br>    req.session.destroy()<br>    res.send(&#123; <span class="hljs-attr">status</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;退出成功！&#x27;</span> &#125;)<br><br><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="在express项目中使用JsonWebToken认证"><a href="#在express项目中使用JsonWebToken认证" class="headerlink" title="在express项目中使用JsonWebToken认证"></a>在express项目中使用JsonWebToken认证</h2><p>jwt认证机制是浏览器登录向服务器发送请求，服务器验证成功后将用户信息加密之后赋值给token属性，然后返回给浏览器，浏览器将token存储到Local Storage或者Session Storage 中，当浏览器再次向服务器发送请求时会将token放在请求头Authorization中一起发送到服务器，服务器解密token验证成功后会将浏览器请求的数据返回给浏览器</p><h3 id="下载jsonwebtoken和express-jwt包"><a href="#下载jsonwebtoken和express-jwt包" class="headerlink" title="下载jsonwebtoken和express-jwt包"></a>下载jsonwebtoken和express-jwt包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install jsonwebtoken express-jwt<br></code></pre></td></tr></table></figure><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// TODO_01：安装并导入 JWT 相关的两个包，分别是 jsonwebtoken 和 express-jwt</span><br><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>) <span class="hljs-comment">//用于生成jwt字符串</span><br><span class="hljs-keyword">const</span> expressJwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-jwt&#x27;</span>) <span class="hljs-comment">//将客户端发送来的字符串解析成原来的JSON对象</span><br></code></pre></td></tr></table></figure><h3 id="定义密钥"><a href="#定义密钥" class="headerlink" title="定义密钥"></a>定义密钥</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// TODO_02：定义 secret 密钥，建议将密钥命名为 secretKey</span><br><span class="hljs-keyword">const</span> secretKey = <span class="hljs-string">&#x27;lijun ^-^&#x27;</span> <span class="hljs-comment">//防止网络传输中被别人破密，在将用户信息转换为jwt字符串时用于加密，在将jwt字符串还原JSON对象时用于解密</span><br><br></code></pre></td></tr></table></figure><h3 id="将用户信息加密"><a href="#将用户信息加密" class="headerlink" title="将用户信息加密"></a>将用户信息加密</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 登录接口</span><br>app.post(<span class="hljs-string">&#x27;/api/login&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>    <span class="hljs-comment">// 将 req.body 请求体中的数据，转存为 userinfo 常量</span><br>    <span class="hljs-keyword">const</span> userinfo = req.body<br><br>    <span class="hljs-comment">// 登录失败</span><br>    <span class="hljs-keyword">if</span> (userinfo.username !== <span class="hljs-string">&#x27;admin&#x27;</span> || userinfo.password !== <span class="hljs-string">&#x27;000000&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> res.send(&#123;<br>            status: <span class="hljs-number">400</span>,<br>            message: <span class="hljs-string">&#x27;登录失败！&#x27;</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">// 登录成功</span><br>    <span class="hljs-comment">// TODO_03：在登录成功之后，调用 jwt.sign() 方法生成 JWT 字符串。并通过 token 属性发送给客户端,三个参数：用户的信息，密钥，token时限</span><br>    res.send(&#123;<br>        status: <span class="hljs-number">200</span>,<br>        message: <span class="hljs-string">&#x27;登陆成功！&#x27;</span>,<br>        token: jwt.sign(&#123; <span class="hljs-attr">username</span>: userinfo.username, <span class="hljs-attr">password</span>: userinfo.password &#125;, secretKey, &#123; <span class="hljs-attr">expiresIn</span>: <span class="hljs-string">&#x27;30s&#x27;</span> &#125;)<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="注册解密中间件"><a href="#注册解密中间件" class="headerlink" title="注册解密中间件"></a>注册解密中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// TODO_04：注册将 JWT 字符串解析还原成 JSON 对象的中间件,expressJwt(&#123;secret:secretKey&#125;)用来解析，unless(&#123;path:[/^\/api\//]&#125;)配置指定哪些接口不需要访问权限</span><br><span class="hljs-comment">// 解析中间件配置成功后，就会将用户信息挂载到req.user上</span><br>app.use(jwtExpress(&#123;<span class="hljs-attr">secret</span>:secretKey,<span class="hljs-attr">algorithms</span>: [<span class="hljs-string">&#x27;HS256&#x27;</span>]&#125;).unless(&#123; <span class="hljs-attr">path</span>: [<span class="hljs-regexp">/^\/api\//</span>] &#125;))<br></code></pre></td></tr></table></figure><h3 id="解密的用户信息发送给用户"><a href="#解密的用户信息发送给用户" class="headerlink" title="解密的用户信息发送给用户"></a>解密的用户信息发送给用户</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这是一个有权限的 API 接口</span><br>app.get(<span class="hljs-string">&#x27;/admin/getinfo&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>    <span class="hljs-comment">// TODO_05：使用 req.user 获取用户信息，并使用 data 属性将用户信息发送给客户端</span><br><br><br>    res.send(&#123;<br>        status: <span class="hljs-number">200</span>,<br>        message: <span class="hljs-string">&#x27;获取用户信息成功！&#x27;</span>,<br>        data: req.user <span class="hljs-comment">// 要发送给客户端的用户信息</span><br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="使用全局错误中间件捕获解析jwt失败后产生的错误"><a href="#使用全局错误中间件捕获解析jwt失败后产生的错误" class="headerlink" title="使用全局错误中间件捕获解析jwt失败后产生的错误"></a>使用全局错误中间件捕获解析jwt失败后产生的错误</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// TODO_06：使用全局错误处理中间件，捕获解析 JWT 失败后产生的错误</span><br>app.use(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err.name == <span class="hljs-string">&#x27;UnauthorizedError&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> res.send(&#123;<br>            status: <span class="hljs-number">401</span>,<br>            message: <span class="hljs-string">&#x27;token失效！&#x27;</span><br>        &#125;)<br>    &#125;<br><br>    res.send(&#123;<br>        status: <span class="hljs-number">500</span>,<br>        message: <span class="hljs-string">&#x27;未知错误！&#x27;</span><br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Node.js 第三方包</title>
    <link href="/2021/02/26/Node.js%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/"/>
    <url>/2021/02/26/Node.js%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<blockquote><p>常用的 <code>npm</code> 第三方包使用说明. 总结如下</p></blockquote><h3 id="1-cors-包"><a href="#1-cors-包" class="headerlink" title="1. cors 包"></a>1. <code>cors</code> 包</h3><ul><li><p>作用</p><p><code>cors</code>是一个 <code>node.js</code> 软件包，用于提供跨域资源请求的中间件</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i cors<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">var</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>)<br><span class="hljs-keyword">var</span> app = express()<br> <br><span class="hljs-comment">// 全局注册 cors 中间件</span><br>app.use(cors())<br> <br>app.get(<span class="hljs-string">&#x27;/products/:id&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  res.json(&#123;<span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;This is CORS-enabled for all origins!&#x27;</span>&#125;)<br>&#125;)<br> <br>app.listen(<span class="hljs-number">80</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;CORS-enabled web server listening on port 80&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p> <a href="https://www.npmjs.com/package/cors">cors</a></p></li></ul><h3 id="2-body-parser-包"><a href="#2-body-parser-包" class="headerlink" title="2. body-parser 包"></a>2. <code>body-parser</code> 包</h3><ul><li><p>作用</p><p><code>node.js</code> 的中间件,  专门用于解析发送 <code>post</code> 请求时请求体中的数据,  使用 <code>req.body</code> 属性即可获取解析后的对象</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i body-parser<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><br><span class="hljs-keyword">var</span> app = express()<br> <br><span class="hljs-comment">// 解析 application/x-www-form-urlencoded 格式的请求体数据</span><br>app.use(bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br> <br><span class="hljs-comment">// 解析 application/json 格式的请求体数据</span><br>app.use(bodyParser.json())<br> <br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  <span class="hljs-comment">// 响应解析后的请求体对象</span><br>  res.send(req.body)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/body-parser">body-parser</a></p></li></ul><h3 id="3-mysql-包"><a href="#3-mysql-包" class="headerlink" title="3. mysql 包"></a>3. <code>mysql</code> 包</h3><ul><li><p>作用</p><p><code>npm</code> 上的第三方模块包, 为 <code>Node.js</code> 项目提供了连接和操作数据库的驱动</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i mysql<br></code></pre></td></tr></table></figure><ul><li><p>使用方法</p><ul><li>连接数据库-方法1(创建一个新连接)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> mysql      = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>);<br>  <br>  <span class="hljs-keyword">var</span> connection = mysql.createConnection(&#123;<br>    host     : <span class="hljs-string">&#x27;example.org&#x27;</span>,<br>    user     : <span class="hljs-string">&#x27;bob&#x27;</span>,<br>    password : <span class="hljs-string">&#x27;secret&#x27;</span>,<br>    database : <span class="hljs-string">&#x27;my_db&#x27;</span><br>  &#125;);<br>  <br>  <span class="hljs-comment">// 2. 使用 query方法执行 sql 语句</span><br>  connection.query(<span class="hljs-string">&#x27;SELECT 1&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>    <span class="hljs-comment">// connected!</span><br>  &#125;);<br></code></pre></td></tr></table></figure><ul><li>连接数据库-方法2 (创建一个连接池)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>);<br><span class="hljs-keyword">var</span> pool  = mysql.createPool(&#123;<br>  connectionLimit : <span class="hljs-number">10</span>,<br>  host            : <span class="hljs-string">&#x27;example.org&#x27;</span>,<br>  user            : <span class="hljs-string">&#x27;bob&#x27;</span>,<br>  password        : <span class="hljs-string">&#x27;secret&#x27;</span>,<br>  database        : <span class="hljs-string">&#x27;my_db&#x27;</span><br>&#125;);<br><br><span class="hljs-comment">// 使用 query方法执行 sql 语句</span><br>pool.query(<span class="hljs-string">&#x27;SELECT 1 + 1 AS solution&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;The solution is: &#x27;</span>, results[<span class="hljs-number">0</span>].solution);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>执行<code>SQL</code>语句的方法 :  <code>query(sql语句, [values], callback)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 查询数据: ? 是一个占位符, 会被中括号中对应的值替换</span><br>db.query(<span class="hljs-string">&#x27;SELECT * FROM books WHERE author = ?&#x27;</span>, [<span class="hljs-string">&#x27;David&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>  <span class="hljs-comment">// error 是查询中出现的错误</span><br>  <span class="hljs-comment">// results 是查询得到的所有结果</span><br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 更新数据: 多个 ? 占位符, 会按照出现的先后顺序依次被中括号中的值替换</span><br>db.query(<span class="hljs-string">&#x27;UPDATE users SET foo = ?, bar = ?, baz = ? WHERE id = ?&#x27;</span>, [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, userId], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>  <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 插入数据: 快速插入一条数据</span><br><span class="hljs-keyword">var</span> post  = &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Hello MySQL&#x27;</span>&#125;;<br>db.query(<span class="hljs-string">&#x27;INSERT INTO posts SET ?&#x27;</span>, post, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>  <span class="hljs-comment">// ok!</span><br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取插入, 更新 和 删除语句执行后影响的行数</span><br>db.query(<span class="hljs-string">&#x27;DELETE FROM posts WHERE title = &quot;wrong&quot;&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">throw</span> error;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;deleted &#x27;</span> + results.affectedRows + <span class="hljs-string">&#x27; rows&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/mysql">mysql</a></p></li></ul><h3 id="4-bcryptjs-包"><a href="#4-bcryptjs-包" class="headerlink" title="4. bcryptjs 包"></a>4. <code>bcryptjs</code> 包</h3><ul><li><p>作用</p><p>密码不能以明文形式保存到数据库中，否则数据泄露密码就会被窃取,  密码一般加密存储.</p><p> <code>bcryptjs</code> 是一个第三方加密库，用来实现在 Node 环境下的密码加密</p></li><li><p>加盐(<strong>salt</strong>)</p><p>在密码学中，是指通过在密码任意固定位置插入特定的字符串，让散列后的结果和使用原始密码的散列结果不相符，这种过程称之为 “加盐”.</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i bcryptjs<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> bcrypt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;bcryptjs&#x27;</span>)<br><span class="hljs-comment">// .hashSync() 方法对明文密码 bacon 进行加盐加密, 盐值为 10 (数字越大,密码越不容易被破解)</span><br><span class="hljs-keyword">var</span> hash = bcrypt.hashSync(<span class="hljs-string">&#x27;bacon&#x27;</span>, <span class="hljs-number">10</span>);<br><br><span class="hljs-comment">// .compareSync(加密前的密码, 加密后的密码) 方法比较加密前后的密码是否匹配</span><br>bcrypt.compareSync(<span class="hljs-string">&quot;not_bacon&quot;</span>, hash) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/bcryptjs">bcryptjs</a></p></li></ul><h3 id="5-jsonwebtoken-包"><a href="#5-jsonwebtoken-包" class="headerlink" title="5. jsonwebtoken 包"></a>5. <code>jsonwebtoken</code> 包</h3><ul><li><p>作用</p><p>常用于网站中用户的身份认证,  可以把用户信息加密后生成一个 <code>token</code> 令牌, 不推荐存放用户密码等数据 </p></li><li><p><code>JWT </code>原理</p><p><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">参考说明</a></p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i jsonwebtoken<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>);<br><br><span class="hljs-keyword">var</span> privateKey = <span class="hljs-string">&#x27;seeyou&#x27;</span>; <span class="hljs-comment">// 私钥</span><br><span class="hljs-keyword">var</span> token = jwt.sign(&#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;xm&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">123</span>&#125;, privateKey, &#123;<br>    algorithm: <span class="hljs-string">&#x27;HS256&#x27;</span>, <span class="hljs-comment">// 加密算法</span><br>    expiresIn: <span class="hljs-string">&#x27;1h&#x27;</span> <span class="hljs-comment">// 过期时间</span><br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a></p></li></ul><h3 id="6-express-jwt-包"><a href="#6-express-jwt-包" class="headerlink" title="6. express-jwt 包"></a>6. <code>express-jwt</code> 包</h3><ul><li><p>功能</p><p>提供给 <code>express</code> 的一个中间件, 可以验证 <code>JWT</code> 令牌是否有效, 并解码出 <code>JWT</code> 中用户信息挂载到 <code>req.user</code> 上</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i express-jwt<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> app = express()<br><br><span class="hljs-keyword">var</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-jwt&#x27;</span>);<br><br><span class="hljs-comment">// 全局注册 jwt 中间件</span><br><span class="hljs-comment">// secret 是生成 jwt 时的秘钥; alg 是生成 jwt 时的加密算法</span><br><span class="hljs-comment">// .unless(&#123; path: [/^\/api\//] &#125;) 指定哪些接口不需要进行 jwt 的身份认证</span><br>app.use(jwt(&#123; <span class="hljs-attr">secret</span>: <span class="hljs-string">&#x27;seeyou&#x27;</span>, <span class="hljs-attr">algorithms</span>: [<span class="hljs-string">&#x27;HS256&#x27;</span>]&#125;).unless(&#123;<span class="hljs-attr">path</span>: [<span class="hljs-regexp">/^\/api\//</span>]&#125;));<br><br><span class="hljs-comment">// jwt 解码后的用户信息通过 req.user 来进行获取</span><br>app.get(<span class="hljs-string">&#x27;/protected&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res</span>) </span>&#123;<br>    res.send(req.user) <span class="hljs-comment">// &#123; username: &#x27;xm&#x27;, id: 123&#125;</span><br>&#125;);<br><br><span class="hljs-comment">// 解码 token 不合法时会抛出一个错误, 统一在错误中间件中进行处理</span><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, req, res, next</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (err.name === <span class="hljs-string">&#x27;UnauthorizedError&#x27;</span>) &#123;<br>    res.status(<span class="hljs-number">401</span>).send(<span class="hljs-string">&#x27;invalid token...&#x27;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><p>官方文档 (**<code>npm</code> 文档没有更新, 参考最新的 <code>github</code> 文档 **)</p><p><a href="https://github.com/auth0/express-jwt">express-jwt</a>     </p></li></ul><h3 id="7-multer-包"><a href="#7-multer-包" class="headerlink" title="7. multer 包"></a>7. <code>multer</code> 包</h3><ul><li><p>作用</p><p><code>multer</code> 是 <code>node.js</code> 的中间件, 用来解析 <code>multipart/form-data</code> 格式提交的数据,  主要用于文件上传的场景;</p><p>文件一般不会直接存放在数据库, 影响查询效率,  更多的是把文件存储在本地,  再向数据库中存储本地文件的路径</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i multer<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><p>​    表单中 <strong>文本字段</strong> 解析处理后的数据被挂载到 <code>req.body</code> 属性上</p><p>​    表单中 <strong>文件字段</strong> 解析处理后的数据被挂载到 <code>req.file</code>属性上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">var</span> multer  = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;multer&#x27;</span>)<br><br><span class="hljs-comment">// 创建 multer 的实例对象，通过 dest 属性指定上传文件的存放路径</span><br><span class="hljs-keyword">var</span> upload = multer(&#123; <span class="hljs-attr">dest</span>: path.join(__dirname, <span class="hljs-string">&#x27;../uploads&#x27;</span>) &#125;)<br><br><span class="hljs-keyword">var</span> app = express()<br><br><span class="hljs-comment">//  upload.single(&#x27;cover_img&#x27;) 表示对 cover_img 这个文件字段单独处理</span><br>app.post(<span class="hljs-string">&#x27;/profile&#x27;</span>, upload.single(<span class="hljs-string">&#x27;cover_img&#x27;</span>), <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  <span class="hljs-comment">// req.file对象 存放了的文件处理后的信息, </span><br>  <span class="hljs-comment">// 其中有 fieldname 属性: 表单提交时的字段名, filename 属性: 文件上传到本地后的默认文件名</span><br>  <span class="hljs-comment">// req.body对象 存放了文本字段解析后的值</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/multer">multer</a></p></li></ul><h3 id="8-hapi-joi-包"><a href="#8-hapi-joi-包" class="headerlink" title="8. @hapi/joi 包"></a>8. <code>@hapi/joi</code> 包</h3><ul><li><p>作用</p><p>在实际开发中，前后端都需要对表单的数据进行合法性的验证，而且，后端做为数据合法性验证的最后 一个关口，在拦截非法数据方面，起到了至关重要的作用,  <code>joi</code> 是 推荐使用第三方数据验证模块</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i @hapi/joi<br></code></pre></td></tr></table></figure><ul><li>基本使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/** </span><br><span class="hljs-comment">  * string() 值必须是字符串 </span><br><span class="hljs-comment">  * alphanum() 值只能是包含 a-zA-Z0-9 的字符串 </span><br><span class="hljs-comment">  * min(length) 最小长度 </span><br><span class="hljs-comment">  * max(length) 最大长度 </span><br><span class="hljs-comment">  * required() 值是必填项，不能为 undefined </span><br><span class="hljs-comment">  * pattern(正则表达式) 值必须符合正则表达式的规则 </span><br><span class="hljs-comment">  * email() 符合邮箱格式</span><br><span class="hljs-comment">  * integer() 值为整数</span><br><span class="hljs-comment">  */</span><br><br><span class="hljs-comment">// 用户名的验证规则 </span><br><span class="hljs-keyword">const</span> username = joi.string().alphanum().min(<span class="hljs-number">1</span>).max(<span class="hljs-number">10</span>).required()<br><br><span class="hljs-comment">// 密码的验证规则 </span><br><span class="hljs-keyword">const</span> password = joi.string().pattern(<span class="hljs-regexp">/^[\S]&#123;6,12&#125;$/</span>).required()<br><br><span class="hljs-comment">// 邮箱验证规则</span><br><span class="hljs-keyword">const</span> email = joi.string().email().required()<br><br><span class="hljs-comment">// id 验证规则</span><br><span class="hljs-keyword">const</span> id = joi.number().integer().min(<span class="hljs-number">1</span>).required() <br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://joi.dev/api/">Joi</a></p></li></ul><h3 id="9-escook-express-joi-包"><a href="#9-escook-express-joi-包" class="headerlink" title="9. @escook/express-joi 包"></a>9. <code>@escook/express-joi</code> 包</h3><ul><li><p>作用</p><p><code>express</code> 项目中对请求参数应用 <code>joi</code> 验证规则的中间件</p></li><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i @escook/express-joi<br></code></pre></td></tr></table></figure></li><li><p>使用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">// 导入 Joi 来定义验证规则</span><br><span class="hljs-keyword">const</span> Joi = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@hapi/joi&#x27;</span>)<br><span class="hljs-comment">// 1. 导入 @escook/express-joi</span><br><span class="hljs-keyword">const</span> expressJoi = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@escook/express-joi&#x27;</span>)<br> <br><span class="hljs-comment">// 解析 x-www-form-urlencoded 格式的表单数据</span><br>app.use(express.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br> <br><span class="hljs-comment">// 2. 定义验证规则</span><br><span class="hljs-comment">// 注意：如果客户端提交的某些参数项未在 schema 中定义，</span><br><span class="hljs-comment">// 此时，这些多余的参数项默认会被忽略掉</span><br><span class="hljs-keyword">const</span> userSchema = &#123;<br>  <span class="hljs-comment">// 2.1 校验 req.body 中的数据</span><br>  body: &#123;<br>    username: Joi.string().alphanum().min(<span class="hljs-number">3</span>).max(<span class="hljs-number">12</span>).required(),<br>    password: Joi.string().pattern(<span class="hljs-regexp">/^[\S]&#123;6,15&#125;$/</span>).required(),<br>    repassword: Joi.ref(<span class="hljs-string">&#x27;password&#x27;</span>),<br>  &#125;,<br>  <span class="hljs-comment">// 2.2 校验 req.query 中的数据</span><br>  query: &#123;<br>    name: Joi.string().alphanum().min(<span class="hljs-number">3</span>).required(),<br>    age: Joi.number().integer().min(<span class="hljs-number">1</span>).max(<span class="hljs-number">100</span>).required(),<br>  &#125;,<br>  <span class="hljs-comment">// 2.3 校验 req.params 中的数据</span><br>  params: &#123;<br>    id: Joi.number().integer().min(<span class="hljs-number">0</span>).required(),<br>  &#125;,<br>&#125;<br> <br><span class="hljs-comment">// 3. 在路由中通过 expressJoi(userSchema) 的方式</span><br><span class="hljs-comment">//    调用中间件进行参数验证</span><br>app.post(<span class="hljs-string">&#x27;/adduser/:id&#x27;</span>, expressJoi(userSchema), <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> body = req.body<br>  res.send(body)<br>&#125;)<br> <br><span class="hljs-comment">// 4.1 错误级别中间件</span><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, req, res, next</span>) </span>&#123;<br>  <span class="hljs-comment">// 4.1 Joi 参数校验失败</span><br>  <span class="hljs-keyword">if</span> (err <span class="hljs-keyword">instanceof</span> Joi.ValidationError) &#123;<br>    <span class="hljs-keyword">return</span> res.send(&#123;<br>      status: <span class="hljs-number">1</span>,<br>      message: err.message,<br>    &#125;)<br>  &#125;<br>  <span class="hljs-comment">// 4.2 未知错误</span><br>  res.send(&#123;<br>    status: <span class="hljs-number">1</span>,<br>    message: err.message,<br>  &#125;)<br>&#125;)<br> <br><span class="hljs-comment">// 调用 app.listen 方法，指定端口号并启动web服务器</span><br>app.listen(<span class="hljs-number">3001</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Express server running at http://127.0.0.1:3001&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>官网文档</p><p><a href="https://www.npmjs.com/package/@escook/express-joi">@escook/express-joi</a></p></li></ul><h3 id="10-express-session-包"><a href="#10-express-session-包" class="headerlink" title="10. express-session 包"></a>10. <code>express-session</code> 包</h3><ul><li><p>作用</p><p>提供 <code>session</code> 身份认证方案的第三方包,  生成的 <code>session</code> 数据并不保存在客户端,  而是在服务端存储 (默认位置是内存里), 客户端分发的 <code>cookie</code> 仅仅是用来访问 <code>session</code> 数据的 <code>sessionID</code>.</p></li><li><p>安装</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i express-session<br></code></pre></td></tr></table></figure><ul><li>使用方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> app = express()<br><br><span class="hljs-comment">// 创建一个 session 中间件, 并注册到全局</span><br>app.use(session(&#123;<br>  secret: <span class="hljs-string">&#x27;keyboard cat&#x27;</span>,<br>  resave: <span class="hljs-literal">false</span>,<br>  saveUninitialized: <span class="hljs-literal">true</span><br>&#125;))<br><br><span class="hljs-comment">// 通过 req.session 可以存储和获取 session 数据</span><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (req.session.isLogin) &#123;<br>    res.send(req.session.user)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;请重新登录!&#x27;</span>)<br>  &#125;<br>&#125;)<br><br>app.post(<span class="hljs-string">&#x27;/logout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// TODO_04：清空 Session 信息</span><br>  <span class="hljs-comment">// 销毁当前用户存储的 session 数据</span><br>  req.session.destroy()<br>&#125;)<br><br></code></pre></td></tr></table></figure><ul><li><p>官方文档</p><p><a href="https://www.npmjs.com/package/express-session">express-session</a></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql模块操作数据库</title>
    <link href="/2021/02/26/mysql%E6%A8%A1%E5%9D%97%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2021/02/26/mysql%E6%A8%A1%E5%9D%97%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h3 id="1-下载mysql包"><a href="#1-下载mysql包" class="headerlink" title="1.下载mysql包"></a>1.下载mysql包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install mysql<br></code></pre></td></tr></table></figure><h3 id="2-导入mysql包"><a href="#2-导入mysql包" class="headerlink" title="2.导入mysql包"></a>2.导入mysql包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-链接数据库"><a href="#3-链接数据库" class="headerlink" title="3.链接数据库"></a>3.链接数据库</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> db = mysql.createPool(&#123;<br>    host:<span class="hljs-string">&#x27;主机名&#x27;</span>,<br>    root:<span class="hljs-string">&#x27;用户名&#x27;</span>,<br>    password:<span class="hljs-string">&#x27;密码&#x27;</span>,<br>    database:<span class="hljs-string">&#x27;数据库名字&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="4-使用query-测试是否连接成功"><a href="#4-使用query-测试是否连接成功" class="headerlink" title="4.使用query()测试是否连接成功"></a>4.使用query()测试是否连接成功</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">db.query(<span class="hljs-string">&#x27;select 1+1&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err,results</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br>    <span class="hljs-built_in">console</span>.log(results)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="5-查询表user的数据"><a href="#5-查询表user的数据" class="headerlink" title="5.查询表user的数据"></a>5.查询表user的数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义mysql查询语句</span><br><span class="hljs-keyword">const</span> sql = <span class="hljs-string">`select * from 表名`</span><br><span class="hljs-comment">//执行查询</span><br>db.query(sql,<span class="hljs-function">(<span class="hljs-params">err,results</span>)=&gt;</span>&#123;<span class="hljs-comment">//查询返回的results是个数组</span><br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br>    <span class="hljs-built_in">console</span>.log(results)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="6-插入数据"><a href="#6-插入数据" class="headerlink" title="6.插入数据"></a>6.插入数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定于插入语句</span><br><span class="hljs-keyword">const</span> sql = <span class="hljs-string">`insert into 表名 (列名1,列名2...) values(?,?...)`</span><br><span class="hljs-comment">//执行插入 </span><br>db.query(sql,[<span class="hljs-string">&#x27;值1&#x27;</span>,<span class="hljs-string">&#x27;值2&#x27;</span>...],<span class="hljs-function">(<span class="hljs-params">err,results</span>)=&gt;</span>&#123;<span class="hljs-comment">//返回的results是个对象</span><br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br>    <span class="hljs-keyword">if</span>(results.affectedRows==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;插入成功！&#x27;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="7-插入语句的快捷方式"><a href="#7-插入语句的快捷方式" class="headerlink" title="7.插入语句的快捷方式"></a>7.插入语句的快捷方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义插入的数据</span><br><span class="hljs-keyword">const</span> data = &#123;列名<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;值1&#x27;</span>,列名<span class="hljs-number">2</span>:<span class="hljs-string">&#x27;值2&#x27;</span>,...&#125;<br><span class="hljs-comment">//定义插入语句</span><br><span class="hljs-keyword">const</span> sql = <span class="hljs-string">`insert into 表名 set ?`</span><br><span class="hljs-comment">//执行插入</span><br>db.query(sql,[data],<span class="hljs-function">(<span class="hljs-params">err,results</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br>    &#125;<br>    <span class="hljs-keyword">if</span>(results.affectedRows==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;插入成功！&#x27;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="8-跟新数据"><a href="#8-跟新数据" class="headerlink" title="8.跟新数据"></a>8.跟新数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义跟新的数据</span><br><span class="hljs-keyword">const</span> update = &#123;<span class="hljs-attr">id</span>:值,<span class="hljs-string">&#x27;列名1&#x27;</span>:<span class="hljs-string">&#x27;值1&#x27;</span>,<span class="hljs-string">&#x27;列名2&#x27;</span>:<span class="hljs-string">&#x27;值2&#x27;</span>,...&#125;<br><span class="hljs-comment">//定义跟新语句</span><br><span class="hljs-keyword">const</span> sql = <span class="hljs-string">`update 表名 set &#x27;列名1&#x27;=?,&#x27;列名2&#x27;=?,... where id=?`</span><br><span class="hljs-comment">// 执行跟新</span><br>db.query(sql,[update.列名<span class="hljs-number">1</span>,update.列名<span class="hljs-number">2</span>,...,update.id],<span class="hljs-function">(<span class="hljs-params">err,results</span>)=&gt;</span>&#123;<br>     <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br>    &#125;<br>    <span class="hljs-keyword">if</span>(results.affectedRows==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;跟新成功！&#x27;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="9-跟新数据快捷方式"><a href="#9-跟新数据快捷方式" class="headerlink" title="9.跟新数据快捷方式"></a>9.跟新数据快捷方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义跟新的数据</span><br><span class="hljs-keyword">const</span> update = &#123;列表<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;值1&#x27;</span>,列表<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;值1&#x27;</span>,...&#125;<br><span class="hljs-comment">// 定义跟新语句</span><br><span class="hljs-keyword">const</span> sql = <span class="hljs-string">`update 表名 set ? where id=?`</span><br><span class="hljs-comment">//执行跟新语句</span><br>db.query(sql,[update,id值],<span class="hljs-function">(<span class="hljs-params">err,results</span>)=&gt;</span>&#123;<br>     <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br>    &#125;<br>    <span class="hljs-keyword">if</span>(results.affectedRows==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;跟新成功！&#x27;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="10-删除数据-一般根据id删除"><a href="#10-删除数据-一般根据id删除" class="headerlink" title="10.删除数据 一般根据id删除"></a>10.删除数据 一般根据id删除</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义删除语句</span><br><span class="hljs-keyword">const</span> sql = <span class="hljs-string">`delete from 表名 where id=?`</span><br><span class="hljs-comment">// 执行删除语句</span><br>db.query(sql,[id值],<span class="hljs-function">(<span class="hljs-params">err,results</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br>    &#125;<br>    <span class="hljs-keyword">if</span>(results.affectedRows==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;删除成功！&#x27;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="11-标记删除-通过跟新数据的某个跟id相似的值"><a href="#11-标记删除-通过跟新数据的某个跟id相似的值" class="headerlink" title="11.标记删除 通过跟新数据的某个跟id相似的值"></a>11.标记删除 通过跟新数据的某个跟id相似的值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义跟新数据</span><br><span class="hljs-keyword">const</span> sql = <span class="hljs-string">`update 表名 set 列名=? where id=?`</span><br><span class="hljs-comment">// 执行语句</span><br>db.query(sql,[列值,id值],<span class="hljs-function">(<span class="hljs-params">err,results</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br>    &#125;<br>    <span class="hljs-keyword">if</span>(results.affectedRows==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;删除成功！&#x27;</span>)<br>    &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库操作语句</title>
    <link href="/2021/02/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E5%8F%A5/"/>
    <url>/2021/02/24/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><h3 id="查询指定表所有数据"><a href="#查询指定表所有数据" class="headerlink" title="查询指定表所有数据"></a>查询指定表所有数据</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> 表名<br></code></pre></td></tr></table></figure><h3 id="查询指定表指定列数据"><a href="#查询指定表指定列数据" class="headerlink" title="查询指定表指定列数据"></a>查询指定表指定列数据</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> 列名 <span class="hljs-keyword">FROM</span> 表名<br></code></pre></td></tr></table></figure><h2 id="插入语句"><a href="#插入语句" class="headerlink" title="插入语句"></a>插入语句</h2><h3 id="向指定表中插入数据"><a href="#向指定表中插入数据" class="headerlink" title="向指定表中插入数据"></a>向指定表中插入数据</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">INSERT</span> INTO 表名称(列<span class="hljs-number">1</span>,列<span class="hljs-number">2</span>,...) VALUES (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>,...)<br></code></pre></td></tr></table></figure><h2 id="更新语句"><a href="#更新语句" class="headerlink" title="更新语句"></a>更新语句</h2><h3 id="更新数据表中某一列或者多列数据"><a href="#更新数据表中某一列或者多列数据" class="headerlink" title="更新数据表中某一列或者多列数据"></a>更新数据表中某一列或者多列数据</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UPDATA</span> 表名称 SET 列<span class="hljs-number">1</span>=值<span class="hljs-number">1</span>,列<span class="hljs-number">2</span>=值<span class="hljs-number">2</span>,... WHERE 列名称=值<br></code></pre></td></tr></table></figure><h2 id="删除语句"><a href="#删除语句" class="headerlink" title="删除语句"></a>删除语句</h2><h3 id="删除数据表中某一行或者多行数据"><a href="#删除数据表中某一行或者多行数据" class="headerlink" title="删除数据表中某一行或者多行数据"></a>删除数据表中某一行或者多行数据</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 列名=值<br></code></pre></td></tr></table></figure><h2 id="WHERE语句"><a href="#WHERE语句" class="headerlink" title="WHERE语句"></a>WHERE语句</h2><h3 id="常见运算符"><a href="#常见运算符" class="headerlink" title="常见运算符"></a>常见运算符</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">不等于 &lt;&gt;或者！=<br>两者之间 <span class="hljs-keyword">BETWEEN</span><br>相似 <span class="hljs-keyword">LIKE</span><br></code></pre></td></tr></table></figure><h2 id="AND-和-OR"><a href="#AND-和-OR" class="headerlink" title="AND 和 OR"></a>AND 和 OR</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">可以在<span class="hljs-keyword">where</span>语句中将多个条件结合起来<br></code></pre></td></tr></table></figure><h2 id="排序语句"><a href="#排序语句" class="headerlink" title="排序语句"></a>排序语句</h2><h3 id="使用-ORDER-BY-子句对结果进行排序-ASC升序-DESC降序"><a href="#使用-ORDER-BY-子句对结果进行排序-ASC升序-DESC降序" class="headerlink" title="使用 ORDER BY 子句对结果进行排序 ASC升序 DESC降序"></a>使用 ORDER BY 子句对结果进行排序 ASC升序 DESC降序</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">SELECT * FORM 表名 <span class="hljs-keyword">ORDER</span> <span class="hljs-title">BY</span> 列名<br></code></pre></td></tr></table></figure><h3 id="多重排序规则"><a href="#多重排序规则" class="headerlink" title="多重排序规则"></a>多重排序规则</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> 列名称 <span class="hljs-keyword">FROM</span> 表名称 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 列名称 [排序规则],  列名称 [排序规则]<br>同时使用 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 和 <span class="hljs-keyword">WHERE</span>子句时, 应该让 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 位于 <span class="hljs-keyword">WHERE</span> 之后, 否则将会产生错误<br></code></pre></td></tr></table></figure><h2 id="返回符合指定条件的行数"><a href="#返回符合指定条件的行数" class="headerlink" title="返回符合指定条件的行数"></a>返回符合指定条件的行数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> 表名<br></code></pre></td></tr></table></figure><h2 id="给查询出来的列起别名"><a href="#给查询出来的列起别名" class="headerlink" title="给查询出来的列起别名"></a>给查询出来的列起别名</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> 列名 <span class="hljs-keyword">AS</span> 别名 <span class="hljs-keyword">FROM</span> 表名<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/10/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/10/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC06%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础第06天笔记"><a href="#JavaScript基础第06天笔记" class="headerlink" title="JavaScript基础第06天笔记"></a>JavaScript基础第06天笔记</h1><h2 id="1-内置对象"><a href="#1-内置对象" class="headerlink" title="1 - 内置对象"></a>1 - 内置对象</h2><h3 id="1-1-内置对象"><a href="#1-1-内置对象" class="headerlink" title="1.1 内置对象"></a>1.1 内置对象</h3><p>​         JavaScript 中的对象分为3种：<strong>自定义对象 、内置对象、 浏览器对象</strong><br>​        前面两种对象是JS 基础 内容，属于 ECMAScript；  第三个浏览器对象属于 JS 独有的， JS API 讲解内置对象就是指 JS 语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是<strong>最基本而必要的功能</strong>（属性和方法），内置对象最大的优点就是帮助我们快速开发</p><p>​         JavaScript 提供了多个内置对象：Math、 Date 、Array、String等    </p><h3 id="1-2-查文档"><a href="#1-2-查文档" class="headerlink" title="1.2 查文档"></a>1.2 查文档</h3><p>​        查找文档：学习一个内置对象的使用，只要学会其常用成员的使用即可，我们可以通过查文档学习，可以通过MDN/W3C来查询。<br>​        Mozilla 开发者网络（MDN）提供了有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。<br>​        MDN:<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><h3 id="1-3-Math对象"><a href="#1-3-Math对象" class="headerlink" title="1.3 Math对象"></a>1.3 Math对象</h3><p>​        Math 对象不是构造函数，它具有数学常数和函数的属性和方法。跟数学相关的运算（求绝对值，取整、最大值等）可以使用 Math 中的成员。</p><table><thead><tr><th>属性、方法名</th><th>功能</th></tr></thead><tbody><tr><td>Math.PI</td><td>圆周率</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.round()</td><td>四舍五入版 就近取整   注意 -3.5   结果是  -3</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr><tr><td>Math.max()/Math.min()</td><td>求最大和最小值</td></tr><tr><td>Math.random()</td><td>获取范围在[0,1)内的随机值</td></tr></tbody></table><p>​    注意：上面的方法使用时必须带括号</p><p>​    <strong>获取指定范围内的随机整数</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandom</span>(<span class="hljs-params">min, max</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * (max - min + <span class="hljs-number">1</span>)) + min; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-日期对象"><a href="#1-4-日期对象" class="headerlink" title="1.4 日期对象"></a>1.4 日期对象</h3><p>​         Date 对象和 Math 对象不一样，Date是一个构造函数，所以使用时需要实例化后才能使用其中具体方法和属性。Date 实例用来处理日期和时间</p><ul><li><p>使用Date实例化日期对象</p><ul><li>获取当前时间必须实例化：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br></code></pre></td></tr></table></figure><ul><li>获取指定时间的日期对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> future = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&#x27;2019/5/1&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注意：如果创建实例时并未传入参数，则得到的日期对象是当前时间对应的日期对象</p></li><li><p>使用Date实例的方法和属性    </p><p><img src="images%5C%E5%9B%BE%E7%89%871.png"></p></li><li><p>通过Date实例获取总毫米数</p><ul><li><p>总毫秒数的含义</p><p>​    基于1970年1月1日（世界标准时间）起的毫秒数</p></li><li><p>获取总毫秒数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 实例化Date对象</span><br><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-comment">// 1. 用于获取对象的原始值</span><br><span class="hljs-built_in">console</span>.log(date.valueOf())<br><span class="hljs-built_in">console</span>.log(date.getTime())<br><span class="hljs-comment">// 2. 简单写可以这么做</span><br><span class="hljs-keyword">var</span> now = + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-comment">// 3. HTML5中提供的方法，有兼容性问题</span><br><span class="hljs-keyword">var</span> now = <span class="hljs-built_in">Date</span>.now();<br></code></pre></td></tr></table></figure><h3 id="1-5-数组对象"><a href="#1-5-数组对象" class="headerlink" title="1.5 数组对象"></a>1.5 数组对象</h3></li></ul></li></ul><h4 id="创建数组的两种方式"><a href="#创建数组的两种方式" class="headerlink" title="创建数组的两种方式"></a>创建数组的两种方式</h4><ul><li><p>字面量方式</p><ul><li><p>示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-literal">true</span>];<br></code></pre></td></tr></table></figure></li></ul></li><li><p>new Array()</p><ul><li><p>示例代码如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-type">Array</span>();<br></code></pre></td></tr></table></figure><p>​    注意：上面代码中arr创建出的是一个空数组，如果需要使用构造函数Array创建非空数组，可以在创建数组时传入参数</p><p>​    参数传递规则如下：</p><ul><li><p>如果只传入一个参数，则参数规定了数组的长度</p></li><li><p>如果传入了多个参数，则参数称为数组的元素</p></li></ul></li></ul></li></ul><h4 id="检测是否为数组"><a href="#检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h4><ul><li><p>instanceof 运算符</p><ul><li><p>instanceof 可以判断一个对象是否是某个构造函数的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">23</span>];<br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-built_in">console</span>.log(arr <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(obj <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>Array.isArray()</p><ul><li><p>Array.isArray()用于判断一个对象是否为数组，isArray() 是 HTML5 中提供的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">23</span>];<br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(arr));   <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(obj));   <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="添加删除数组元素的方法"><a href="#添加删除数组元素的方法" class="headerlink" title="添加删除数组元素的方法"></a>添加删除数组元素的方法</h4></li></ul></li><li><p>数组中有进行增加、删除元素的方法，部分方法如下表</p><p><img src="images%5C%E5%9B%BE%E7%89%872.png"></p><p>注意：push、unshift为增加元素方法；pop、shift为删除元素的方法</p></li></ul><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><ul><li><p>数组中有对数组本身排序的方法，部分方法如下表</p><p><img src="images%5C%E5%9B%BE%E7%89%873.png"></p><p>注意：sort方法需要传入参数来设置升序、降序排序</p><ul><li>如果传入“function(a,b){ return a-b;}”，则为升序</li><li>如果传入“function(a,b){ return b-a;}”，则为降序</li></ul></li></ul><h4 id="数组索引方法"><a href="#数组索引方法" class="headerlink" title="数组索引方法"></a>数组索引方法</h4><ul><li><p>数组中有获取数组指定元素索引值的方法，部分方法如下表</p><p><img src="images%5C%E5%9B%BE%E7%89%874.png"></p></li></ul><h4 id="数组转换为字符串"><a href="#数组转换为字符串" class="headerlink" title="数组转换为字符串"></a>数组转换为字符串</h4><ul><li><p>数组中有把数组转化为字符串的方法，部分方法如下表</p><p><img src="images%5C%E5%9B%BE%E7%89%875.png"></p><p>注意：join方法如果不传入参数，则按照 “ , ”拼接元素</p></li></ul><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ul><li><p>数组中还有其他操作方法，同学们可以在课下自行查阅学习</p><p>  <img src="images%5C%E5%9B%BE%E7%89%876.png"></p></li></ul><h3 id="1-6-字符串对象"><a href="#1-6-字符串对象" class="headerlink" title="1.6 字符串对象"></a>1.6 字符串对象</h3><h4 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h4><p>​        为了方便操作基本数据类型，JavaScript 还提供了三个特殊的引用类型：String、Number和 Boolean。</p><p>​        基本包装类型就是把简单数据类型包装成为复杂数据类型，这样基本数据类型就有了属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 下面代码有什么问题？</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;andy&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(str.length);<br></code></pre></td></tr></table></figure><p>​        按道理基本数据类型是没有属性和方法的，而对象才有属性和方法，但上面代码却可以执行，这是因为</p><p>​        js 会把基本数据类型包装为复杂数据类型，其执行过程如下 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 生成临时变量，把简单类型包装为复杂数据类型</span><br><span class="hljs-keyword">var</span> temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&#x27;andy&#x27;</span>);<br><span class="hljs-comment">// 2. 赋值给我们声明的字符变量</span><br>str = temp;<br><span class="hljs-comment">// 3. 销毁临时变量</span><br>temp = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><h4 id="字符串的不可变"><a href="#字符串的不可变" class="headerlink" title="字符串的不可变"></a>字符串的不可变</h4><p>​        指的是里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间。</p><p>​        当重新给字符串变量赋值的时候，变量之前保存的字符串不会被修改，依然在内存中重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变。<br>​        由于字符串的不可变，在<strong>大量拼接字符串</strong>的时候会有效率问题</p><h4 id="根据字符返回位置"><a href="#根据字符返回位置" class="headerlink" title="根据字符返回位置"></a>根据字符返回位置</h4><p>​        字符串通过基本包装类型可以调用部分方法来操作字符串，以下是返回指定字符的位置的方法：</p><p><img src="images%5C%E5%9B%BE%E7%89%877.png"></p><p>​        案例：查找字符串”abcoefoxyozzopp”中所有o出现的位置以及次数</p><ol><li>先查找第一个o出现的位置</li><li>然后 只要indexOf 返回的结果不是 -1 就继续往后查找</li><li>因为indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加1，从而继续查找     </li></ol><h4 id="根据位置返回字符"><a href="#根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h4><p>​        字符串通过基本包装类型可以调用部分方法来操作字符串，以下是根据位置返回指定位置上的字符：</p><p><img src="images%5C%E5%9B%BE%E7%89%878.png"></p><p>​        在上述方法中，charCodeAt方法返回的是指定位置上字符对应的ASCII码，ASCII码对照表如下：</p><p><img src="images%5C%E5%9B%BE%E7%89%879.png"></p><p>​        案例：判断一个字符串 ‘abcoefoxyozzopp’ 中出现次数最多的字符，并统计其次数</p><ol><li><p>核心算法：利用 charAt(） 遍历这个字符串</p></li><li><p>把每个字符都存储给对象， 如果对象没有该属性，就为1，如果存在了就 +1</p></li><li><p>遍历对象，得到最大值和该字符     </p><p>​    注意：在遍历的过程中，把字符串中的每个字符作为对象的属性存储在对象总，对应的属性值是该字符出现的次数</p></li></ol><h4 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h4><p>​        字符串通过基本包装类型可以调用部分方法来操作字符串，以下是部分操作方法：</p><p><img src="images%5C%E5%9B%BE%E7%89%8710.png"></p><h4 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a>replace()方法</h4><p>​        replace() 方法用于在字符串中用一些字符替换另一些字符，其使用格式如下：  </p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">字符串.<span class="hljs-built_in">replace</span>(被替换的字符串， 要替换为的字符串)；<br></code></pre></td></tr></table></figure><h4 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a>split()方法</h4><p>​        split()方法用于切分字符串，它可以将字符串切分为数组。在切分完毕之后，返回的是一个新数组。</p><p>​        其使用格式如下：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">字符串.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;分割字符&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="2-简单数据类型和复杂数据类型"><a href="#2-简单数据类型和复杂数据类型" class="headerlink" title="2 - 简单数据类型和复杂数据类型"></a>2 - 简单数据类型和复杂数据类型</h2><h3 id="2-1-简单数据类型"><a href="#2-1-简单数据类型" class="headerlink" title="2.1 简单数据类型"></a>2.1 简单数据类型</h3><p>​        <strong>简单类型</strong>（<strong>基本数据类型</strong>、<strong>值类型</strong>）：在存储时变量中存储的是值本身，包括string ，number，boolean，undefined，null</p><h3 id="2-2-复杂数据类型"><a href="#2-2-复杂数据类型" class="headerlink" title="2.2 复杂数据类型"></a>2.2 复杂数据类型</h3><p>​        <strong>复杂数据类型（引用类型）</strong>：在存储时变量中存储的仅仅是地址（引用），通过 new 关键字创建的对象（系统对象、自定义对象），如 Object、Array、Date等；</p><h3 id="2-3-堆栈"><a href="#2-3-堆栈" class="headerlink" title="2.3 堆栈"></a>2.3 堆栈</h3><ul><li>堆栈空间分配区别：</li></ul><p>　　1、栈（操作系统）：由操作系统自动分配释放存放函数的参数值、局部变量的值等。其操作方式类似于数据结构中的栈；</p><p>简单数据类型存放到栈里面</p><p>　　2、堆（操作系统）：存储复杂类型(对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。</p><p><img src="images%5C%E5%9B%BE%E7%89%8711.png"></p><ul><li><p>简单数据类型的存储方式</p><p>​        值类型变量的数据直接存放在变量（栈空间）中</p></li></ul><p><img src="images%5C%E5%9B%BE%E7%89%8712.png"></p><ul><li><p>复杂数据类型的存储方式</p><p>​        引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中</p><p><img src="images%5C%E5%9B%BE%E7%89%8713.png"></p></li></ul><h3 id="2-4-简单类型传参"><a href="#2-4-简单类型传参" class="headerlink" title="2.4 简单类型传参"></a>2.4 简单类型传参</h3><p>​        函数的形参也可以看做是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里的值复制了一份给形参，那么在方法内部对形参做任何修改，都不会影响到的外部变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a</span>) </span>&#123;<br>    a++;<br>    <span class="hljs-built_in">console</span>.log(a); <br>&#125;<br><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;<br>fn(x);<br><span class="hljs-built_in">console</span>.log(x)；<br></code></pre></td></tr></table></figure><p>​        运行结果如下：</p><p><img src="images%5C%E5%9B%BE%E7%89%8714.png"></p><h3 id="2-5-复杂数据类型传参"><a href="#2-5-复杂数据类型传参" class="headerlink" title="2.5 复杂数据类型传参"></a>2.5 复杂数据类型传参</h3><p>​        函数的形参也可以看做是一个变量，当我们把引用类型变量传给形参时，其实是把变量在栈空间里保存的堆地址复制给了形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params">x</span>) </span>&#123; <span class="hljs-comment">// x = p</span><br>    <span class="hljs-built_in">console</span>.log(x.name); <span class="hljs-comment">// 2. 这个输出什么 ?    </span><br>    x.name = <span class="hljs-string">&quot;张学友&quot;</span>;<br>    <span class="hljs-built_in">console</span>.log(x.name); <span class="hljs-comment">// 3. 这个输出什么 ?    </span><br>&#125;<br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;刘德华&quot;</span>);<br><span class="hljs-built_in">console</span>.log(p.name);    <span class="hljs-comment">// 1. 这个输出什么 ?   </span><br>f1(p);<br><span class="hljs-built_in">console</span>.log(p.name);    <span class="hljs-comment">// 4. 这个输出什么 ?  </span><br></code></pre></td></tr></table></figure><p>​        运行结果如下：</p><p><img src="images%5C%E5%9B%BE%E7%89%8715.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/10/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC05%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/10/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC05%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础第05天笔记"><a href="#JavaScript基础第05天笔记" class="headerlink" title="JavaScript基础第05天笔记"></a>JavaScript基础第05天笔记</h1><h2 id="1-作用域"><a href="#1-作用域" class="headerlink" title="1 - 作用域"></a>1 - 作用域</h2><h3 id="1-1-作用域概述"><a href="#1-1-作用域概述" class="headerlink" title="1.1 作用域概述"></a>1.1 作用域概述</h3><pre><code>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。JavaScript（es6前）中的作用域有两种：</code></pre><ul><li>全局作用域</li><li>局部作用域（函数作用域）    </li></ul><h3 id="1-2-全局作用域"><a href="#1-2-全局作用域" class="headerlink" title="1.2 全局作用域"></a>1.2 全局作用域</h3><pre><code>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件。</code></pre><h3 id="1-3-局部作用域"><a href="#1-3-局部作用域" class="headerlink" title="1.3 局部作用域"></a>1.3 局部作用域</h3><pre><code>作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域。</code></pre><h3 id="1-4-JS没有块级作用域"><a href="#1-4-JS没有块级作用域" class="headerlink" title="1.4 JS没有块级作用域"></a>1.4 JS没有块级作用域</h3><ul><li><p>块作用域由 { } 包括。</p></li><li><p>在其他编程语言中（如 java、c#等），在 if 语句、循环语句中创建的变量，仅仅只能在本 if 语句、本循环语句中使用，如下面的Java代码：    </p><p>java有块级作用域：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">true</span>)&#123;<br>  <span class="hljs-keyword">int</span> num = <span class="hljs-number">123</span>;<br>  system.out.print(num);  <span class="hljs-comment">// 123</span><br>&#125;<br>system.out.print(num);    <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><p>以上java代码会报错，是因为代码中 { } 即一块作用域，其中声明的变量 num，在 “{ }” 之外不能使用；</p><p>而与之类似的JavaScript代码，则不会报错：</p></li></ul><p>  Js中没有块级作用域（在ES6之前）</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>  <span class="hljs-keyword">var</span> num = <span class="hljs-number">123</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>); <span class="hljs-comment">//123</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);   <span class="hljs-comment">//123</span><br></code></pre></td></tr></table></figure><h2 id="2-变量的作用域"><a href="#2-变量的作用域" class="headerlink" title="2 - 变量的作用域"></a>2 - 变量的作用域</h2><pre><code>在JavaScript中，根据作用域的不同，变量可以分为两种：</code></pre><ul><li>全局变量</li><li>局部变量</li></ul><p>2.1 全局变量</p><pre><code>在全局作用域下声明的变量叫做全局变量（在函数外部定义的变量）。</code></pre><ul><li>全局变量在代码的任何位置都可以使用</li><li>在全局作用域下 var 声明的变量 是全局变量</li><li>特殊情况下，在函数内不使用 var 声明的变量也是全局变量（不建议使用）</li></ul><p>2.2 局部变量</p><pre><code>在局部作用域下声明的变量叫做局部变量（在函数内部定义的变量）</code></pre><ul><li>局部变量只能在该函数内部使用</li><li>在函数内部 var 声明的变量是局部变量</li><li>函数的形参实际上就是局部变量</li></ul><p>2.3 全局变量和局部变量的区别</p><ul><li>全局变量：在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存</li><li>局部变量：只在函数内部使用，当其所在的代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间</li></ul><h2 id="3-作用域链"><a href="#3-作用域链" class="headerlink" title="3 - 作用域链"></a>3 - 作用域链</h2><pre><code>只要是代码都一个作用域中，写在函数内部的局部作用域，未写在任何函数内部即在全局作用域中；如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域；根据在**[内部函数可以访问外部函数变量]**的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链案例分析1：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">123</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f2</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log( num );<br>    &#125;<br>    f2();<br>&#125;<br><span class="hljs-keyword">var</span> num = <span class="hljs-number">456</span>;<br>f1();<br></code></pre></td></tr></table></figure><p><img src="images%5C%E5%9B%BE%E7%89%871.png"></p><pre><code>作用域链：采取就近原则的方式来查找变量最终的值。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-string">&#x27;22&#x27;</span>;<br>    fn2();<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> a = <span class="hljs-number">3</span>;<br>        fn3();<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn3</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> a = <span class="hljs-number">4</span>;<br>            <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">//a的值 ?</span><br>            <span class="hljs-built_in">console</span>.log(b); <span class="hljs-comment">//b的值 ?</span><br>        &#125;<br>    &#125;<br>&#125;<br>fn1();<br></code></pre></td></tr></table></figure><p><img src="images%5C%E5%9B%BE%E7%89%872.png"></p><h2 id="4-预解析"><a href="#4-预解析" class="headerlink" title="4 - 预解析"></a>4 - 预解析</h2><p>4.1 预解析的相关概念</p><pre><code>JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器在运行 JavaScript 代码的时候分为两步：预解析和代码执行。</code></pre><ul><li><p>预解析：在当前作用域下, JS 代码执行之前，浏览器会默认把带有 var 和 function 声明的变量在内存中进行提前声明或者定义。</p></li><li><p>代码执行： 从上到下执行JS语句。</p><p><strong>预解析会把变量和函数的声明在代码执行之前执行完成。</strong></p></li></ul><p>4.2 变量预解析</p><pre><code>预解析也叫做变量、函数提升。变量提升（变量预解析）： 变量的声明会被提升到当前作用域的最上面，变量的赋值不会提升。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(num);  <span class="hljs-comment">// 结果是多少？</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;      <span class="hljs-comment">// ？</span><br></code></pre></td></tr></table></figure><pre><code>结果：undefined注意：**变量提升只提升声明，不提升赋值**</code></pre><p>4.3 函数预解析</p><pre><code>函数提升： 函数的声明会被提升到当前作用域的最上面，但是不会调用函数。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">fn();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;打印&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>结果：控制台打印字符串 --- ”打印“ 注意：函数声明代表函数整体，所以函数提升后，函数名代表整个函数，但是函数并没有被调用！    </code></pre><p>4.4 函数表达式声明函数问题</p><pre><code>函数表达式创建函数，会执行变量提升，此时接收函数的变量名无法正确的调用：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">fn();<br><span class="hljs-keyword">var</span>  fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;想不到吧&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>结果：报错提示 ”fn is not a function&quot;解释：该段代码执行之前，会做变量声明提升，fn在提升之后的值是undefined；而fn调用是在fn被赋值为函数体之前，此时fn的值是undefined，所以无法正确调用</code></pre><h2 id="5-对象"><a href="#5-对象" class="headerlink" title="5 - 对象"></a>5 - 对象</h2><h3 id="5-1-对象的相关概念"><a href="#5-1-对象的相关概念" class="headerlink" title="5.1 对象的相关概念"></a>5.1 对象的相关概念</h3><ul><li><p>什么是对象？</p><pre><code>在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。  对象是由属性和方法组成的。</code></pre><ul><li><p>属性：事物的特征，在对象中用属性来表示（常用名词）</p></li><li><p>方法：事物的行为，在对象中用方法来表示（常用动词）</p><p><img src="images%5C%E5%9B%BE%E7%89%873.png"></p></li></ul></li><li><p>为什么需要对象？</p><pre><code>保存一个值时，可以使用变量，保存多个值（一组值）时，可以使用数组。如果要保存一个人的完整信息呢？例如，将“张三疯”的个人的信息保存在数组中的方式为：</code></pre><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> arr = [‘张三疯’, ‘男<span class="hljs-string">&#x27;, 128,154];</span><br></code></pre></td></tr></table></figure><pre><code>上述例子中用数组保存数据的缺点是：数据只能通过索引值访问，开发者需要清晰的清除所有的数据的排行才能准确地获取数据，而当数据量庞大时，不可能做到记忆所有数据的索引值。为了让更好地存储一组数据，对象应运而生：对象中为每项数据设置了属性名称，可以访问数据更语义化，数据结构清晰，表意明显，方便开发者使用。使用对象记录上组数据为：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三疯&quot;</span>,<br>    <span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;男&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">128</span>,<br>    <span class="hljs-string">&quot;height&quot;</span>:<span class="hljs-number">154</span><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>JS中的对象表达结构更清晰，更强大。</code></pre></li></ul><h3 id="5-2-创建对象的三种方式"><a href="#5-2-创建对象的三种方式" class="headerlink" title="5.2 创建对象的三种方式"></a>5.2 创建对象的三种方式</h3><ul><li><p>利用字面量创建对象 </p><h5 id="使用对象字面量创建对象："><a href="#使用对象字面量创建对象：" class="headerlink" title="使用对象字面量创建对象："></a><strong>使用对象字面量创建对象</strong>：</h5><pre><code>    就是花括号 &#123; &#125; 里面包含了表达这个具体事物（对象）的属性和方法；&#123; &#125; 里面采取键值对的形式表示 </code></pre><ul><li><p>键：相当于属性名</p></li><li><p>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型，函数类型等）</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> star = &#123;<br>    name : <span class="hljs-string">&#x27;pink&#x27;</span>,<br>    age : <span class="hljs-number">18</span>,<br>    sex : <span class="hljs-string">&#x27;男&#x27;</span>,<br>    sayHi : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        alert(<span class="hljs-string">&#x27;大家好啊~&#x27;</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>上述代码中 star即是创建的对象。</p></li></ul></li><li><p>对象的使用</p><ul><li><p>对象的属性</p><ul><li>对象中存储<strong>具体数据</strong>的 “键值对”中的 “键”称为对象的属性，即对象中存储具体数据的项</li></ul></li><li><p>对象的方法</p><ul><li>对象中存储<strong>函数</strong>的 “键值对”中的 “键”称为对象的方法，即对象中存储函数的项</li></ul></li><li><p>访问对象的属性</p><ul><li><p>对象里面的属性调用 : 对象.属性名 ，这个小点 . 就理解为“ 的 ”  </p></li><li><p>对象里面属性的另一种调用方式 : 对象[‘属性名’]，注意方括号里面的属性必须加引号      </p><p>示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(star.name)     <span class="hljs-comment">// 调用名字属性</span><br><span class="hljs-built_in">console</span>.log(star[<span class="hljs-string">&#x27;name&#x27;</span>])  <span class="hljs-comment">// 调用名字属性</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>调用对象的方法</p><ul><li><p>对象里面的方法调用：对象.方法名() ，注意这个方法名字后面一定加括号 </p><p>示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">star.sayHi();              <span class="hljs-comment">// 调用 sayHi 方法,注意，一定不要忘记带后面的括号</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>变量、属性、函数、方法总结</p><pre><code>属性是对象的一部分，而变量不是对象的一部分，变量是单独存储数据的容器</code></pre><ul><li>变量：单独声明赋值，单独存在</li><li>属性：对象里面的变量称为属性，不需要声明，用来描述该对象的特征</li></ul></li></ul></li></ul><pre><code>    方法是对象的一部分，函数不是对象的一部分，函数是单独封装操作的容器- 函数：单独存在的，通过“函数名()”的方式就可以调用- 方法：对象里面的函数称为方法，方法不需要声明，使用“对象.方法名()”的方式就可以调用，方法用来描述该对象的行为和功能。 </code></pre><ul><li><p>利用 new Object 创建对象 </p><ul><li><p>创建空对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> andy = <span class="hljs-keyword">new</span> Obect();<br></code></pre></td></tr></table></figure><p>通过内置构造函数Object创建对象，此时andy变量已经保存了创建出来的空对象</p></li><li><p>给空对象添加属性和方法</p><ul><li><p>通过对象操作属性和方法的方式，来为对象增加属性和方法</p><p>示例代码如下：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">andy.name = <span class="hljs-string">&#x27;pink&#x27;</span>;<br>andy.age = <span class="hljs-number">18</span>;<br>andy.sex = <span class="hljs-string">&#x27;男&#x27;</span>;<br>andy.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-string">&#x27;大家好啊~&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>Object() ：第一个字母大写   </li><li>new Object() ：需要 new 关键字</li><li>使用的格式：对象.属性 =  值;     </li></ul></li></ul></li><li><p>利用构造函数创建对象</p><ul><li><p>构造函数</p><ul><li><p>构造函数：是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与 new 运算符一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p></li><li><p>构造函数的封装格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> 构造函数名(<span class="hljs-params">形参<span class="hljs-number">1</span>,形参<span class="hljs-number">2</span>,形参<span class="hljs-number">3</span></span>) </span>&#123;<br>     <span class="hljs-built_in">this</span>.属性名<span class="hljs-number">1</span> = 参数<span class="hljs-number">1</span>;<br>     <span class="hljs-built_in">this</span>.属性名<span class="hljs-number">2</span> = 参数<span class="hljs-number">2</span>;<br>     <span class="hljs-built_in">this</span>.属性名<span class="hljs-number">3</span> = 参数<span class="hljs-number">3</span>;<br>     <span class="hljs-built_in">this</span>.方法名 = 函数体;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>构造函数的调用格式</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> obj = new 构造函数名(实参<span class="hljs-number">1</span>，实参<span class="hljs-number">2</span>，实参<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>以上代码中，obj即接收到构造函数创建出来的对象。</p></li><li><p>注意事项</p><ol><li>  构造函数约定<strong>首字母大写</strong>。</li><li>  函数内的属性和方法前面需要添加 <strong>this</strong> ，表示当前对象的属性和方法。</li><li>  构造函数中<strong>不需要 return 返回结果</strong>。</li><li>  当我们创建对象的时候，<strong>必须用 new 来调用构造函数</strong>。</li></ol></li><li><p>其他</p><p> 构造函数，如 Stars()，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class）<br> 创建对象，如 new Stars()，特指某一个，通过 new 关键字创建对象的过程我们也称为对象实例化</p></li></ul></li></ul></li><li><p>new关键字的作用</p><ol><li>在构造函数代码开始执行之前，创建一个空对象；</li><li>修改this的指向，把this指向创建出来的空对象；</li><li>执行函数的代码</li><li>在函数完成之后，返回this—即创建出来的对象</li></ol><h3 id="5-3-遍历对象"><a href="#5-3-遍历对象" class="headerlink" title="5.3 遍历对象"></a>5.3 遍历对象</h3><pre><code>for...in 语句用于对数组或者对象的属性进行循环操作。其语法如下：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (变量 <span class="hljs-keyword">in</span> 对象名字) &#123;<br>    <span class="hljs-comment">// 在此执行代码</span><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>语法中的变量是自定义的，它需要符合命名规范，通常我们会将这个变量写为 k 或者 key。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-built_in">console</span>.log(k);      <span class="hljs-comment">// 这里的 k 是属性名</span><br>    <span class="hljs-built_in">console</span>.log(obj[k]); <span class="hljs-comment">// 这里的 obj[k] 是属性值</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/10/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC04%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/10/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC04%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础第04天笔记"><a href="#JavaScript基础第04天笔记" class="headerlink" title="JavaScript基础第04天笔记"></a>JavaScript基础第04天笔记</h1><h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1 - 数组"></a>1 - 数组</h2><h3 id="1-1-数组的概念"><a href="#1-1-数组的概念" class="headerlink" title="1.1 数组的概念"></a>1.1 数组的概念</h3><ul><li>数组可以把一组相关的数据一起存放，并提供方便的访问(获取）方式。</li><li>数组是指<strong>一组数据的集合</strong>，其中的每个数据被称作<strong>元素</strong>，在数组中可以<strong>存放任意类型的元素</strong>。数组是一种将一组数据存储在单个变量名下的优雅方式。</li></ul><h3 id="1-2-创建数组"><a href="#1-2-创建数组" class="headerlink" title="1.2 创建数组"></a>1.2 创建数组</h3><p>JS 中创建数组有两种方式：</p><ul><li><p>利用  new 创建数组  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> 数组名 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>() ；<br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();   <span class="hljs-comment">// 创建一个新的空数组</span><br></code></pre></td></tr></table></figure><p>注意 Array () ，A 要大写    </p></li><li><p>利用数组字面量创建数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 使用数组字面量方式创建空的数组</span><br><span class="hljs-keyword">var</span>  数组名 = []；<br><span class="hljs-comment">//2. 使用数组字面量方式创建带初始值的数组</span><br><span class="hljs-keyword">var</span>  数组名 = [<span class="hljs-string">&#x27;小白&#x27;</span>,<span class="hljs-string">&#x27;小黑&#x27;</span>,<span class="hljs-string">&#x27;大黄&#x27;</span>,<span class="hljs-string">&#x27;瑞奇&#x27;</span>];<br></code></pre></td></tr></table></figure><ul><li>数组的字面量是方括号 [ ] </li><li>声明数组并赋值称为数组的初始化</li><li>这种字面量方式也是我们以后最多使用的方式</li></ul></li><li><p>数组元素的类型</p><p>数组中可以存放任意类型的数据，例如字符串，数字，布尔值等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arrStus = [<span class="hljs-string">&#x27;小白&#x27;</span>,<span class="hljs-number">12</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">28.9</span>];<br></code></pre></td></tr></table></figure><h3 id="1-3-获取数组中的元素"><a href="#1-3-获取数组中的元素" class="headerlink" title="1.3 获取数组中的元素"></a>1.3 获取数组中的元素</h3></li></ul><p>​        索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）。</p><p><img src="images%5C%E5%9B%BE%E7%89%871.png"></p><p>​        数组可以通过索引来访问、设置、修改对应的数组元素，可以通过“数组名[索引]”的形式来获取数组中的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义数组</span><br><span class="hljs-keyword">var</span> arrStus = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-comment">// 获取数组中的第2个元素</span><br>alert(arrStus[<span class="hljs-number">1</span>]);    <br></code></pre></td></tr></table></figure><p>注意：如果访问时数组没有和索引值对应的元素，则得到的值是undefined</p><h3 id="1-4-遍历数组"><a href="#1-4-遍历数组" class="headerlink" title="1.4 遍历数组"></a>1.4 遍历数组</h3><ul><li><p>数组遍历</p><p>  ​        把数组中的每个元素从头到尾都访问一次（类似学生的点名），可以通过 for 循环索引遍历数组中的每一项</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>    <span class="hljs-built_in">console</span>.log(arrStus[i]);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>数组的长度</p><p>数组的长度：默认情况下表示数组中元素的个数</p><p>使用“数组名.length”可以访问数组元素的数量（数组长度）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arrStus = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>alert(arrStus.length);  <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>  <strong>注意</strong>：</p><ul><li>此处数组的长度是数组元素的个数 ，不要和数组的索引号混淆。</li></ul></li><li><p>当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化</p><ul><li>数组的length属性可以被修改：</li></ul></li><li><p>如果设置的length属性值大于数组的元素个数，则会在数组末尾出现空白元素；</p><ul><li>如果设置的length属性值小于数组的元素个数，则会把超过该值的数组元素删除</li></ul></li></ul><h3 id="1-5-数组中新增元素"><a href="#1-5-数组中新增元素" class="headerlink" title="1.5 数组中新增元素"></a>1.5 数组中新增元素</h3><p>​        数组中可以通过以下方式在数组的末尾插入新元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">数组[ 数组.length ] = 新数据;<br></code></pre></td></tr></table></figure><h2 id="2-函数"><a href="#2-函数" class="headerlink" title="2 - 函数"></a>2 - 函数</h2><h3 id="2-1-函数的概念"><a href="#2-1-函数的概念" class="headerlink" title="2.1 函数的概念"></a>2.1 函数的概念</h3><p>​        在 JS 里面，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。虽然 for循环语句也能实现一些简单的重复操作，但是比较具有局限性，此时我们就可以使用 JS 中的函数。</p><p>​        函数：就是<strong>封装了一段可被重复调用执行的代码块</strong>。通过此代码块可以<strong>实现大量代码的重复使用</strong>。  </p><h3 id="2-2-函数的使用"><a href="#2-2-函数的使用" class="headerlink" title="2.2 函数的使用"></a>2.2 函数的使用</h3><h4 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 声明函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//函数体代码</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>function 是声明函数的关键字,必须小写</p></li><li><p>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</p></li></ul><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 调用函数</span><br>函数名();  <span class="hljs-comment">// 通过调用函数名来执行函数体代码</span><br></code></pre></td></tr></table></figure><ul><li><p>调用的时候千万不要忘记添加小括号</p></li><li><p>口诀：函数不调用，自己不执行</p><p>注意：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p></li></ul><h4 id="函数的封装"><a href="#函数的封装" class="headerlink" title="函数的封装"></a>函数的封装</h4><ul><li><p>函数的封装是把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口</p></li><li><p>简单理解：封装类似于将电脑配件整合组装到机箱中 ( 类似快递打包）  </p><p><img src="images%5C%E5%9B%BE%E7%89%872.png"></p><p>例子：封装计算1-100累加和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">   计算1-100之间值的函数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 声明函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSum</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">var</span> sumNum = <span class="hljs-number">0</span>;<span class="hljs-comment">// 准备一个变量，保存数字和</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>    sumNum += i;<span class="hljs-comment">// 把每个数值 都累加 到变量中</span><br>  &#125;<br>  alert(sumNum);<br>&#125;<br><span class="hljs-comment">// 调用函数</span><br>getSum();<br></code></pre></td></tr></table></figure><h3 id="2-3-函数的参数"><a href="#2-3-函数的参数" class="headerlink" title="2.3 函数的参数"></a>2.3 函数的参数</h3></li></ul><h4 id="函数参数语法"><a href="#函数参数语法" class="headerlink" title="函数参数语法"></a>函数参数语法</h4><ul><li><p>形参：函数定义时设置接收调用时传入</p></li><li><p>实参：函数调用时传入小括号内的真实数据</p><p><img src="images%5C%E5%9B%BE%E7%89%873.png"></p><p>​    参数的作用 : 在函数内部某些值不能固定，我们可以通过参数在调用函数时传递不同的值进去。</p><p>函数参数的运用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 带参数的函数声明</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名(<span class="hljs-params">形参<span class="hljs-number">1</span>, 形参<span class="hljs-number">2</span> , 形参<span class="hljs-number">3.</span>..</span>) </span>&#123; <span class="hljs-comment">// 可以定义任意多的参数，用逗号分隔</span><br>  <span class="hljs-comment">// 函数体</span><br>&#125;<br><span class="hljs-comment">// 带参数的函数调用</span><br>函数名(实参<span class="hljs-number">1</span>, 实参<span class="hljs-number">2</span>, 实参<span class="hljs-number">3.</span>..); <br></code></pre></td></tr></table></figure><ol><li>调用的时候实参值是传递给形参的</li><li>形参简单理解为：不用声明的变量</li><li>实参和形参的多个参数之间用逗号（,）分隔</li></ol></li></ul><h4 id="函数形参和实参数量不匹配时"><a href="#函数形参和实参数量不匹配时" class="headerlink" title="函数形参和实参数量不匹配时"></a>函数形参和实参数量不匹配时</h4><p><img src="images%5C%E5%9B%BE%E7%89%874.png"></p><pre><code>注意：在JavaScript中，形参的默认值是undefined。</code></pre><p>小结：</p><ul><li> 函数可以带参数也可以不带参数</li><li> 声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined</li><li> 调用函数的时候，函数名括号里面的是实参</li><li> 多个参数中间用逗号分隔</li><li> 形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</li></ul><h3 id="2-4-函数的返回值"><a href="#2-4-函数的返回值" class="headerlink" title="2.4 函数的返回值"></a>2.4 函数的返回值</h3><h4 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h4><pre><code>返回值：函数调用整体代表的数据；函数执行完成后可以通过return语句将指定数据返回 。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 声明函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名（）</span>&#123;<br>    ...<br>    <span class="hljs-keyword">return</span>  需要返回的值；<br>&#125;<br><span class="hljs-comment">// 调用函数</span><br>函数名();    <span class="hljs-comment">// 此时调用函数就可以得到函数体内return 后面的值</span><br></code></pre></td></tr></table></figure><ul><li> 在使用 return 语句时，函数会停止执行，并返回指定的值</li><li> 如果函数没有 return ，返回的值是 undefined</li></ul><h4 id="break-continue-return-的区别"><a href="#break-continue-return-的区别" class="headerlink" title="break ,continue ,return 的区别"></a>break ,continue ,return 的区别</h4><ul><li>break ：结束当前的循环体（如 for、while）</li><li>continue ：跳出本次循环，继续执行下次循环（如 for、while）</li><li>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</li></ul><h3 id="2-5-arguments的使用"><a href="#2-5-arguments的使用" class="headerlink" title="2.5 arguments的使用"></a>2.5 arguments的使用</h3><p>​        当不确定有多少个参数传递的时候，可以用 arguments 来获取。JavaScript 中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p><ul><li><p>具有 length 属性</p></li><li><p>按索引方式储存数据</p></li><li><p>不具有数组的 push , pop 等方法</p><p>注意：在函数内部使用该对象，用此对象获取函数调用时传的实参。</p></li></ul><h3 id="2-6-函数案例"><a href="#2-6-函数案例" class="headerlink" title="2.6 函数案例"></a>2.6 函数案例</h3><pre><code>    函数内部可以调用另一个函数，在同一作用域代码中，函数名即代表封装的操作，使用函数名加括号即可以将封装的操作执行。</code></pre><h3 id="2-7-函数的两种声明方式"><a href="#2-7-函数的两种声明方式" class="headerlink" title="2.7 函数的两种声明方式"></a>2.7 函数的两种声明方式</h3><ul><li><p>自定义函数方式(命名函数)</p><p>利用函数关键字 function 自定义函数方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 声明定义方式</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;...&#125;<br><span class="hljs-comment">// 调用  </span><br>fn();  <br></code></pre></td></tr></table></figure><ul><li>因为有名字，所以也被称为命名函数</li><li>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后面</li></ul></li><li><p>函数表达式方式(匿名函数）</p><p>利用函数表达式方式的写法如下： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span><br><span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;...&#125;；<br><span class="hljs-comment">// 调用的方式，函数调用必须写到函数体下面</span><br>fn();<br></code></pre></td></tr></table></figure><ul><li>因为函数没有名字，所以也被称为匿名函数</li><li>这个fn 里面存储的是一个函数  </li><li>函数表达式方式原理跟声明变量方式是一致的</li><li>函数调用的代码必须写到函数体后面</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/10/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC03%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/10/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC03%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础第03天笔记"><a href="#JavaScript基础第03天笔记" class="headerlink" title="JavaScript基础第03天笔记"></a>JavaScript基础第03天笔记</h1><h2 id="1-循环"><a href="#1-循环" class="headerlink" title="1 - 循环"></a>1 - 循环</h2><h3 id="1-1-for循环"><a href="#1-1-for循环" class="headerlink" title="1.1 for循环"></a>1.1 for循环</h3><ul><li><p>语法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(初始化变量; 条件表达式; 操作表达式 )&#123;<br>      <span class="hljs-comment">//循环体</span><br>  &#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>初始化变量</td><td>通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。</td></tr><tr><td>条件表达式</td><td>用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</td></tr><tr><td>操作表达式</td><td>用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。</td></tr></tbody></table><p>执行过程：</p><ol><li>初始化变量，初始化操作在整个 for 循环只会执行一次。</li></ol></li><li><p>执行条件表达式，如果为true，则执行循环体语句，否则退出循环，循环结束。</p></li></ul><ol><li>执行操作表达式，此时第一轮结束。</li><li>第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。</li><li>继续执行操作表达式，第二轮结束。</li><li>后续跟第二轮一致，直至条件表达式为假，结束整个 for 循环。</li></ol><p>断点调试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。断点调试可以帮助观察程序的运行过程<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">断点调试的流程：<br>1、浏览器中按 F12--&gt; sources --&gt;找到需要调试的文件--&gt;在程序的某一行设置断点<br>2、Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。<br>3、摁下F11，程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。<br></code></pre></td></tr></table></figure><ul><li><p>for 循环重复相同的代码</p><p>比如输出10句“媳妇我错了”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  基本写法</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;媳妇我错了~&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// 用户输入次数</span><br><span class="hljs-keyword">var</span> num = prompt(<span class="hljs-string">&#x27;请输入次数:&#x27;</span>)；<br><span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span> ; i &lt;= num; i++) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;媳妇我错了~&#x27;</span>);<br>&#125; <br></code></pre></td></tr></table></figure></li><li><p>for 循环重复不相同的代码</p><p>例如，求输出1到100岁：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  基本写法</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这个人今年&#x27;</span> + i + <span class="hljs-string">&#x27;岁了&#x27;</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p>例如，求输出1到100岁，并提示出生、死亡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// for 里面是可以添加其他语句的 </span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>   <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这个人今年1岁了， 它出生了&#x27;</span>);<br>   &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">100</span>) &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这个人今年100岁了，它死了&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这个人今年&#x27;</span> + i + <span class="hljs-string">&#x27;岁了&#x27;</span>);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>for循环因为有了计数器的存在，还可以重复的执行某些操作，比如做一些算术运算。</p></li></ul><h3 id="1-2-双重for循环"><a href="#1-2-双重for循环" class="headerlink" title="1.2 双重for循环"></a>1.2 双重for循环</h3><ul><li><p>双重 for 循环概述</p><pre><code>        循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环。</code></pre></li><li><p>双重 for 循环语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (外循环的初始; 外循环的条件; 外循环的操作表达式) &#123;<br>    <span class="hljs-keyword">for</span> (内循环的初始; 内循环的条件; 内循环的操作表达式) &#123;  <br>       需执行的代码;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>内层循环可以看做外层循环的循环体语句</li><li>内层循环执行的顺序也要遵循 for 循环的执行顺序 </li><li>外层循环执行一次，内层循环要执行全部次数</li></ul></li><li><p>打印五行五列星星</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> star = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">3</span>; j++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;<br>      star += <span class="hljs-string">&#x27;☆&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">// 每次满 5个星星 就 加一次换行</span><br>    star += <span class="hljs-string">&#x27;\n&#x27;</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(star);<br></code></pre></td></tr></table></figure><p>核心逻辑：</p><p>1.内层循环负责一行打印五个星星</p><p>2.外层循环负责打印五行</p></li><li><p>for 循环小结</p><ul><li>for 循环可以重复执行某些相同代码</li><li>for 循环可以重复执行些许不同的代码，因为我们有计数器</li><li>for 循环可以重复执行某些操作，比如算术运算符加法操作</li><li>随着需求增加，双重for循环可以做更多、更好看的效果</li><li>双重 for 循环，外层循环一次，内层 for 循环全部执行</li><li>for 循环是循环条件和数字直接相关的循环</li></ul></li></ul><h3 id="1-3-while循环"><a href="#1-3-while循环" class="headerlink" title="1.3 while循环"></a>1.3 while循环</h3><p>while语句的语法结构如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">while</span> (条件表达式) &#123;<br>    <span class="hljs-comment">// 循环体代码 </span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行思路：</p><ul><li>1 先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</li><li>2 执行循环体代码</li><li>3 循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</li></ul><p>注意：</p><ul><li>使用 while 循环时一定要注意，它必须要有退出条件，否则会成为死循环</li></ul><h3 id="1-4-do-while循环"><a href="#1-4-do-while循环" class="headerlink" title="1.4 do-while循环"></a>1.4 do-while循环</h3><p>do… while 语句的语法结构如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-comment">// 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span><br>&#125; <span class="hljs-keyword">while</span>(条件表达式);<br></code></pre></td></tr></table></figure><p>执行思路</p><ul><li><p>1 先执行一次循环体代码 </p></li><li><p>2 再执行条件表达式，如果结果为 true，则继续执行循环体代码，如果为 false，则退出循环，继续执行后面代码    </p><p>注意：先再执行循环体，再判断，do…while循环语句至少会执行一次循环体代码</p></li></ul><h3 id="1-5-continue、break"><a href="#1-5-continue、break" class="headerlink" title="1.5 continue、break"></a>1.5 continue、break</h3><p>continue 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。</p><p>例如，吃5个包子，第3个有虫子，就扔掉第3个，继续吃第4个第5个包子，其代码实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这个包子有虫子，扔掉&#x27;</span>);<br>        <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 跳出本次循环，跳出的是第3次循环 </span><br>     &#125;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我正在吃第&#x27;</span> + i + <span class="hljs-string">&#x27;个包子呢&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="images%5C%E5%9B%BE%E7%89%871.png"></p><p>  break 关键字用于立即跳出整个循环（循环结束）。</p><p>  例如，吃5个包子，吃到第3个发现里面有半个虫子，其余的不吃了，其代码实现如下：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>   <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;<br>       <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 直接退出整个for 循环，跳到整个for下面的语句</span><br>   &#125;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我正在吃第&#x27;</span> + i + <span class="hljs-string">&#x27;个包子呢&#x27;</span>);<br> &#125;<br></code></pre></td></tr></table></figure><p>  运行结果：</p><p>  <img src="images%5C%E5%9B%BE%E7%89%872.png"></p><h2 id="2-代码规范"><a href="#2-代码规范" class="headerlink" title="2 - 代码规范"></a>2 - 代码规范</h2><h3 id="2-1-标识符命名规范"><a href="#2-1-标识符命名规范" class="headerlink" title="2.1 标识符命名规范"></a>2.1 标识符命名规范</h3><ul><li> 变量、函数的命名必须要有意义</li><li> 变量的名称一般用名词  </li><li> 函数的名称一般用动词  </li></ul><h3 id="2-2-操作符规范"><a href="#2-2-操作符规范" class="headerlink" title="2.2 操作符规范"></a>2.2 操作符规范</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 操作符的左右两侧各保留一个空格</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>   <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;<br>       <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 直接退出整个 for 循环，跳到整个for循环下面的语句</span><br>   &#125;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我正在吃第&#x27;</span> + i + <span class="hljs-string">&#x27;个包子呢&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-单行注释规范"><a href="#2-3-单行注释规范" class="headerlink" title="2.3 单行注释规范"></a>2.3 单行注释规范</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>   <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;<br>       <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 单行注释前面注意有个空格</span><br>   &#125;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我正在吃第&#x27;</span> + i + <span class="hljs-string">&#x27;个包子呢&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-其他规范"><a href="#2-4-其他规范" class="headerlink" title="2.4 其他规范"></a>2.4 其他规范</h3><pre><code>关键词、操作符之间后加空格</code></pre><p><img src="images%5C%E5%9B%BE%E7%89%873.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/10/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC02%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/10/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC02%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础第02天"><a href="#JavaScript基础第02天" class="headerlink" title="JavaScript基础第02天"></a>JavaScript基础第02天</h1><h2 id="1-运算符（操作符）"><a href="#1-运算符（操作符）" class="headerlink" title="1 - 运算符（操作符）"></a>1 - 运算符（操作符）</h2><h3 id="1-1-运算符的分类"><a href="#1-1-运算符的分类" class="headerlink" title="1.1 运算符的分类"></a>1.1 运算符的分类</h3><p><strong>运算符</strong>（operator）也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。</p><pre><code>JavaScript中常用的运算符有：</code></pre><ul><li> 算数运算符</li><li> 递增和递减运算符</li><li> 比较运算符</li><li> 逻辑运算符</li><li> 赋值运算符</li></ul><h3 id="1-2-算数运算符"><a href="#1-2-算数运算符" class="headerlink" title="1.2 算数运算符"></a>1.2 算数运算符</h3><ul><li><p>算术运算符概述</p><p>概念：算术运算使用的符号，用于执行两个变量或值的算术运算。</p><p><img src="images%5C%E5%9B%BE%E7%89%871.png"></p></li><li><p>浮点数的精度问题</p><p>浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> result = <span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>;    <span class="hljs-comment">// 结果不是 0.3，而是：0.30000000000000004</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">0.07</span> * <span class="hljs-number">100</span>);   <span class="hljs-comment">// 结果不是 7，  而是：7.000000000000001</span><br></code></pre></td></tr></table></figure><p>所以：不要直接判断两个浮点数是否相等 ! </p></li><li><p>表达式和返回值</p><p>表达式：是由数字、运算符、变量等以能求得数值的有意义排列方法所得的组合</p><p>简单理解：是由数字、运算符、变量等组成的式子</p><p>表达式最终都会有一个结果，返回给开发者，称为返回值</p></li></ul><h3 id="1-3-递增和递减运算符"><a href="#1-3-递增和递减运算符" class="headerlink" title="1.3 递增和递减运算符"></a>1.3 递增和递减运算符</h3><ul><li><p>递增和递减运算符概述</p><pre><code>如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（ -- ）运算符来完成。在 JavaScript 中，递增（++）和递减（ -- ）既可以放在变量前面，也可以放在变量后面。放在变量前面时，我们可以称为前置递增（递减）运算符，放在变量后面时，我们可以称为后置递增（递减）运算符。注意：递增和递减运算符必须和变量配合使用。 </code></pre></li><li><p>递增运算符</p><ul><li><p>前置递增运算符</p><p>  ++num 前置递增，就是自加1，类似于 num =  num + 1，但是 ++num 写起来更简单。</p><p>  使用口诀：先自加，后返回值</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span>  num = <span class="hljs-number">10</span>;<br>alert(++num + <span class="hljs-number">10</span>);   <span class="hljs-comment">// 21</span><br></code></pre></td></tr></table></figure><ul><li><p>后置递增运算符</p><p>num++ 后置递增，就是自加1，类似于 num =  num + 1 ，但是 num++ 写起来更简单。</p><p>使用口诀：先返回原值，后自加 </p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span>  num = <span class="hljs-number">10</span>;<br>alert(<span class="hljs-number">10</span> + num++);  <span class="hljs-comment">// 20</span><br></code></pre></td></tr></table></figure><h3 id="1-4-比较运算符"><a href="#1-4-比较运算符" class="headerlink" title="1.4 比较运算符"></a>1.4 比较运算符</h3></li><li><p>比较运算符概述</p><pre><code>概念：比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（true / false）作为比较运算的结果。</code></pre><p><img src="images%5C%E5%9B%BE%E7%89%872.png"></p></li><li><p>等号比较</p><p><img src="images%5C%E5%9B%BE%E7%89%873.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">18</span> == <span class="hljs-string">&#x27;18&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">18</span> === <span class="hljs-string">&#x27;18&#x27;</span>); <br></code></pre></td></tr></table></figure><h3 id="1-5-逻辑运算符"><a href="#1-5-逻辑运算符" class="headerlink" title="1.5 逻辑运算符"></a>1.5 逻辑运算符</h3></li><li><p>逻辑运算符概述</p><pre><code>概念：逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断</code></pre><p><img src="images%5C%E5%9B%BE%E7%89%874.png"></p></li><li><p>逻辑与&amp;&amp;</p><p>两边都是 true才返回 true，否则返回 false</p><p>​                <img src="images\图片5.png" alt=""></p><p>​                <img src="images\图片6.png" alt=""></p></li><li><p>逻辑或 ||</p><p>两边都是 true才返回 true，否则返回 false</p><p>​                <img src="images\图片7.png" alt=""></p><p>​                <img src="images\图片8.png" alt=""></p></li><li><p>逻辑非 ！</p><p>逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isOk = !<span class="hljs-literal">true</span>;<br><span class="hljs-built_in">console</span>.log(isOk);  <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure></li><li><p>短路运算（逻辑中断）</p><p> 短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;</p><ul><li><p>逻辑与</p><p>  语法： 表达式1 &amp;&amp; 表达式2</p><pre><code>  - 如果第一个表达式的值为真，则返回表达式2    - 如果第一个表达式的值为假，则返回表达式1</code></pre>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log( <span class="hljs-number">123</span> &amp;&amp; <span class="hljs-number">456</span> );        <span class="hljs-comment">// 456</span><br><span class="hljs-built_in">console</span>.log( <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">456</span> );          <span class="hljs-comment">// 0</span><br><span class="hljs-built_in">console</span>.log( <span class="hljs-number">123</span> &amp;&amp; <span class="hljs-number">456</span>&amp;&amp; <span class="hljs-number">789</span> );  <span class="hljs-comment">// 789</span><br></code></pre></td></tr></table></figure></li><li><p>逻辑或</p><p> 语法： 表达式1 || 表达式2</p><pre><code> - 如果第一个表达式的值为真，则返回表达式1  - 如果第一个表达式的值为假，则返回表达式2</code></pre>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log( <span class="hljs-number">123</span> || <span class="hljs-number">456</span> );         <span class="hljs-comment">//  123</span><br><span class="hljs-built_in">console</span>.log( <span class="hljs-number">0</span> ||  <span class="hljs-number">456</span> );          <span class="hljs-comment">//  456</span><br><span class="hljs-built_in">console</span>.log( <span class="hljs-number">123</span> || <span class="hljs-number">456</span> || <span class="hljs-number">789</span> );  <span class="hljs-comment">//  123</span><br></code></pre></td></tr></table></figure><h3 id="1-6-赋值运算符"><a href="#1-6-赋值运算符" class="headerlink" title="1.6 赋值运算符"></a>1.6 赋值运算符</h3><p>概念：用来把数据赋值给变量的运算符。</p></li></ul></li></ul><p><img src="images%5C%E5%9B%BE%E7%89%879.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>;<br>age += <span class="hljs-number">5</span>;  <span class="hljs-comment">// 相当于 age = age + 5;</span><br>age -= <span class="hljs-number">5</span>;  <span class="hljs-comment">// 相当于 age = age - 5;</span><br>age *= <span class="hljs-number">10</span>; <span class="hljs-comment">// 相当于 age = age * 10;</span><br></code></pre></td></tr></table></figure><h3 id="1-7-运算符优先级"><a href="#1-7-运算符优先级" class="headerlink" title="1.7 运算符优先级"></a>1.7 运算符优先级</h3><p><img src="images%5C%E5%9B%BE%E7%89%8710.png"></p><ul><li>一元运算符里面的逻辑非优先级很高</li><li>逻辑与比逻辑或优先级高</li></ul><h2 id="2-流程控制"><a href="#2-流程控制" class="headerlink" title="2 - 流程控制"></a>2 - 流程控制</h2><h3 id="2-1-流程控制概念"><a href="#2-1-流程控制概念" class="headerlink" title="2.1 流程控制概念"></a>2.1 流程控制概念</h3><pre><code>在一个程序执行的过程中，各条代码的执行顺序对程序的结果是有直接影响的。很多时候我们要通过控制代码的执行顺序来实现我们要完成的功能。简单理解：**流程控制就是来控制代码按照一定结构顺序来执行**流程控制主要有三种结构，分别是**顺序结构**、**分支结构**和**循环结构**，代表三种代码执行的顺序。</code></pre><p><img src="images%5C%E5%9B%BE%E7%89%8711.png"></p><h3 id="2-2-顺序流程控制"><a href="#2-2-顺序流程控制" class="headerlink" title="2.2 顺序流程控制"></a>2.2 顺序流程控制</h3><p>​    </p><p>​    顺序结构是程序中最简单、最基本的流程控制，它没有特定的语法结构，程序会按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。<br>                <img src="images\图片12.png" alt=""></p><h3 id="2-3-分支流程控制"><a href="#2-3-分支流程控制" class="headerlink" title="2.3 分支流程控制"></a>2.3 分支流程控制</h3><ul><li><p>分支结构</p><p>由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果</p><pre><code>            &lt;img src=&quot;images\图片13.png&quot; alt=&quot;&quot;&gt;</code></pre><p>  JS 语言提供了两种分支结构语句：if 语句、switch 语句</p></li><li><p>if 语句</p><ul><li>语法结构</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 条件成立执行代码，否则什么也不做</span><br><span class="hljs-keyword">if</span> (条件表达式) &#123;<br>    <span class="hljs-comment">// 条件成立执行的代码语句</span><br>&#125;<br></code></pre></td></tr></table></figure><pre><code>语句可以理解为一个行为，循环语句和分支语句就是典型的语句。一个程序由很多个语句组成，一般情况下，会分割成一个一个的语句。</code></pre><ul><li><p>执行流程</p><p><img src="images%5C%E5%9B%BE%E7%89%8714.png"></p></li></ul></li><li><p>if else语句（双分支语句）</p><ul><li><p>语法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 条件成立  执行 if 里面代码，否则执行else 里面的代码</span><br><span class="hljs-keyword">if</span> (条件表达式) &#123;<br>    <span class="hljs-comment">// [如果] 条件成立执行的代码</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// [否则] 执行的代码</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>执行流程</p><p><img src="images%5C%E5%9B%BE%E7%89%8715.png"></p></li></ul></li><li><p>if else if 语句(多分支语句)</p><ul><li><p>语法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 适合于检查多重条件。</span><br><span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">1</span>) &#123;<br>    语句<span class="hljs-number">1</span>；<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">2</span>)  &#123;<br>    语句<span class="hljs-number">2</span>；<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">3</span>)  &#123;<br>   语句<span class="hljs-number">3</span>；<br> ....<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 上述条件都不成立执行此处代码</span><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>执行逻辑</p><p><img src="images%5C%E5%9B%BE%E7%89%8716.png"></p></li></ul></li></ul><h3 id="2-4-三元表达式"><a href="#2-4-三元表达式" class="headerlink" title="2.4 三元表达式"></a>2.4 三元表达式</h3><ul><li><p>语法结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">表达式<span class="hljs-number">1</span> ? 表达式<span class="hljs-number">2</span> : 表达式<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure></li><li><p>执行思路</p><ul><li>如果表达式1为 true ，则返回表达式2的值，如果表达式1为 false，则返回表达式3的值</li><li>简单理解： 就类似于  if  else （双分支） 的简写</li></ul></li></ul><h3 id="2-5-switch分支流程控制"><a href="#2-5-switch分支流程控制" class="headerlink" title="2.5 switch分支流程控制"></a>2.5 switch分支流程控制</h3><ul><li><p>语法结构</p><pre><code>switch 语句也是多分支语句，它用于基于不同的条件来执行不同的代码。当要针对变量设置一系列的特定值的选项时，就可以使用 switch。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">switch</span>( 表达式 )&#123; <br>    <span class="hljs-keyword">case</span> value1:<br>        <span class="hljs-comment">// 表达式 等于 value1 时要执行的代码</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> value2:<br>        <span class="hljs-comment">// 表达式 等于 value2 时要执行的代码</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-comment">// 表达式 不等于任何一个 value 时要执行的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>switch ：开关 转换  ， case ：小例子   选项</p></li><li><p>关键字 switch 后面括号内可以是表达式或值， 通常是一个变量</p></li><li><p>关键字 case , 后跟一个选项的表达式或值，后面跟一个冒号</p></li><li><p>switch 表达式的值会与结构中的 case 的值做比较 </p></li><li><p>如果存在匹配全等(===) ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止，整个 switch 语句代码执行结束</p></li><li><p>如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</p><p><strong>注意： 执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句。</strong></p></li></ul></li><li><p>switch 语句和 if else if 语句的区别</p><ul><li>一般情况下，它们两个语句可以相互替换</li><li>switch…case 语句通常处理 case为比较确定值的情况， 而 if…else…语句更加灵活，常用于范围判断(大于、等于某个范围)</li><li>switch 语句进行条件判断后直接执行到程序的条件语句，效率更高。而if…else 语句有几种条件，就得判断多少次。</li><li>当分支比较少时，if… else语句的执行效率比 switch语句高。</li><li>当分支比较多时，switch语句的执行效率比较高，而且结构更清晰。 </li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/10/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC01%E5%A4%A9%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/10/JavaScript%E5%9F%BA%E7%A1%80%E7%AC%AC01%E5%A4%A9%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础第01天"><a href="#JavaScript基础第01天" class="headerlink" title="JavaScript基础第01天"></a>JavaScript基础第01天</h1><h2 id="1-编程语言"><a href="#1-编程语言" class="headerlink" title="1 - 编程语言"></a>1 - 编程语言</h2><h3 id="1-1-编程"><a href="#1-1-编程" class="headerlink" title="1.1 编程"></a>1.1 编程</h3><ul><li>编程：<ul><li>就是让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。</li></ul></li><li>计算机程序：<ul><li>就是计算机所执行的一系列的指令集合，而程序全部都是用我们所掌握的语言来编写的，所以人们要控制计算机一定要通过计算机语言向计算机发出命令。</li></ul></li></ul><h3 id="1-2-计算机语言"><a href="#1-2-计算机语言" class="headerlink" title="1.2 计算机语言"></a>1.2 计算机语言</h3><ul><li><p>计算机语言指用于人与计算机之间通讯的语言，它是人与计算机之间传递信息的媒介。</p></li><li><p>计算机语言的种类非常的多，总的来说可以分成机器语言，汇编语言和高级语言三大类。</p></li><li><p>实际上计算机最终所执行的都是 机器语言，它是由“0”和“1”组成的二进制数，二进制是计算机语言的基础。</p><p><img src="images%5C%E5%9B%BE%E7%89%871.png"></p></li></ul><h3 id="1-3-编程语言"><a href="#1-3-编程语言" class="headerlink" title="1.3 编程语言"></a>1.3 编程语言</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">编程语言：<br>可以通过类似于人类语言的“语言”来控制计算机，让计算机为我们做事情，这样的语言就叫做编程语言（Programming Language）。编程语言是用来控制计算机的一系列指令，它有固定的格式和词汇（不同编程语言的格式和词汇不一样），必须遵守。如今通用的编程语言有两种形式：汇编语言和高级语言。<br></code></pre></td></tr></table></figure><table><thead><tr><th>语言类型</th><th align="center">说明</th></tr></thead><tbody><tr><td><strong>汇编语言</strong></td><td align="center">汇编语言和机器语言实质是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，容易识别和记忆。</td></tr><tr><td><strong>高级语言</strong></td><td align="center">高级语言主要是相对于低级语言而言，它并不是特指某一种具体的语言，而是包括了很多编程语言，常用的有C语言、C++、Java、C#、Python、PHP、JavaScript、Go语言、Objective-C、Swift等。</td></tr></tbody></table><p><img src="images%5C%E5%9B%BE%E7%89%872.png"></p><h3 id="1-4-翻译器"><a href="#1-4-翻译器" class="headerlink" title="1.4 翻译器"></a>1.4 翻译器</h3><pre><code>    高级语言所编制的程序不能直接被计算机识别，必须经过转换才能被执行，为此，我们需要一个翻译器。翻译器可以将我们所编写的源代码转换为机器语言，这也被称为二进制化。</code></pre><p> <img src="images%5C%E5%9B%BE%E7%89%873.png"></p><h3 id="1-5-编程语言和标记语言区别"><a href="#1-5-编程语言和标记语言区别" class="headerlink" title="1.5 编程语言和标记语言区别"></a>1.5 编程语言和标记语言区别</h3><table><thead><tr><th>语言</th><th>说明</th></tr></thead><tbody><tr><td>编程语言</td><td>编程语言有很强的逻辑和行为能力。在编程语言里, 你会看到很多 if else 、for 、while等具有逻辑性和行为能力的指令，这是主动的。</td></tr><tr><td>标记语言</td><td>标记语言（html）不用于向计算机发出指令，常用于格式化和链接。标记语言的存在是用来被读取的, 他是被动的。</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>计算机可以帮助人类解决某些问题</li><li>程序员利用编程语言编写程序发出指令控制计算机来实现这些任务</li><li>编程语言有机器语言、汇编语言、高级语言</li><li>高级语言需要一个翻译器转换为计算机识别的机器语言</li><li>编程语言是主动的有很强的逻辑性</li></ol><h2 id="2-计算机基础"><a href="#2-计算机基础" class="headerlink" title="2 - 计算机基础"></a>2 - 计算机基础</h2><h3 id="2-1-计算机组成"><a href="#2-1-计算机组成" class="headerlink" title="2.1 计算机组成"></a>2.1 计算机组成</h3><p><img src="images%5C%E5%9B%BE%E7%89%874.png"></p><p><img src="images%5C%E5%9B%BE%E7%89%875.png"></p><h3 id="2-2-数据存储"><a href="#2-2-数据存储" class="headerlink" title="2.2 数据存储"></a>2.2 数据存储</h3><ol><li>计算机内部使用二进制 0 和 1来表示数据。</li><li>所有数据，包括文件、图片等最终都是以二进制数据（0 和 1）的形式存放在硬盘中的。</li><li>所有程序，包括操作系统，本质都是各种数据，也以二进制数据的形式存放在硬盘中。平时我们所说的安装软件，其实就是把程序文件复制到硬盘中。</li><li>硬盘、内存都是保存的二进制数据。</li></ol><h3 id="2-3-数据存储单位"><a href="#2-3-数据存储单位" class="headerlink" title="2.3 数据存储单位"></a>2.3 数据存储单位</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">大小关系：<span class="hljs-built_in">bit</span> &lt; <span class="hljs-keyword">byte</span> &lt; kb &lt; GB &lt; TB&lt;.....<br></code></pre></td></tr></table></figure><ul><li>位(bit)：   1bit 可以保存一个 0 或者 1 （最小的存储单位）</li><li>字节(Byte)：1B = 8b</li><li>千字节(KB)：1KB = 1024B</li><li>兆字节(MB)：1MB = 1024KB</li><li>吉字节(GB):  1GB = 1024MB</li><li>太字节(TB):  1TB = 1024GB</li></ul><h3 id="2-4-程序运行"><a href="#2-4-程序运行" class="headerlink" title="2.4 程序运行"></a>2.4 程序运行</h3><p><img src="images%5C%E5%9B%BE%E7%89%876.png"></p><pre><code>计算机运行软件的过程：1. 打开某个程序时，先从硬盘中把程序的代码加载到内存中2. CPU执行内存中的代码   注意：之所以要内存的一个重要原因，是因为 cpu运行太快了，如果只从硬盘中读数据，会浪费cpu性能，所以，才使用存取速度更快的内存来保存运行时的数据。（内存是电，硬盘是机械）</code></pre><h2 id="3-初始JavaScript"><a href="#3-初始JavaScript" class="headerlink" title="3 - 初始JavaScript"></a>3 - 初始JavaScript</h2><h3 id="3-1-JavaScript-是什么"><a href="#3-1-JavaScript-是什么" class="headerlink" title="3.1 JavaScript 是什么"></a>3.1 JavaScript 是什么</h3><p><img src="images%5C%E5%9B%BE%E7%89%877.png"></p><ul><li><p>JavaScript 是世界上最流行的语言之一，是一种运行在客户端的脚本语言 （Script 是脚本的意思）</p></li><li><p>脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行</p></li><li><p>现在也可以基于 Node.js 技术进行服务器端编程</p><p>  <img src="images%5C%E5%9B%BE%E7%89%878.png"></p></li></ul><h3 id="3-2-JavaScript的作用"><a href="#3-2-JavaScript的作用" class="headerlink" title="3.2 JavaScript的作用"></a>3.2 JavaScript的作用</h3><ul><li> 表单动态校验（密码强度检测）  （ JS 产生最初的目的 ）</li><li> 网页特效</li><li> 服务端开发(Node.js)</li><li> 桌面程序(Electron)</li><li> App(Cordova) </li><li> 控制硬件-物联网(Ruff)</li><li> 游戏开发(cocos2d-js)</li></ul><h3 id="3-3-HTML-CSS-JS-的关系"><a href="#3-3-HTML-CSS-JS-的关系" class="headerlink" title="3.3 HTML/CSS/JS 的关系"></a>3.3 HTML/CSS/JS 的关系</h3><p><img src="images%5C%E5%9B%BE%E7%89%879.png"></p><h3 id="3-4-浏览器执行-JS-简介"><a href="#3-4-浏览器执行-JS-简介" class="headerlink" title="3.4 浏览器执行 JS 简介"></a>3.4 浏览器执行 JS 简介</h3><p><strong>浏览器分成两部分：渲染引擎和 JS 引擎</strong></p><p><img src="images%5Cneihe.png"></p><pre><code>    浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以 JavaScript 语言归为脚本语言，会逐行解释执行。</code></pre><p><img src="images%5C%E5%9B%BE%E7%89%8710.png"></p><h3 id="3-5-JS-的组成"><a href="#3-5-JS-的组成" class="headerlink" title="3.5 JS 的组成"></a>3.5 JS 的组成</h3><p><img src="images%5C%E5%9B%BE%E7%89%8711.png"></p><ol><li><h4 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a><strong>ECMAScript</strong></h4><pre><code>​        ECMAScript 是由ECMA 国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为 JavaScript或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。</code></pre><p><img src="images%5C%E5%9B%BE%E7%89%8712.png"></p><p>​        ECMAScript：规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p><p>更多参看MDN: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/JavaScript_technologies_overview">MDN手册</a></p></li><li><h4 id="DOM——文档对象模型"><a href="#DOM——文档对象模型" class="headerlink" title="DOM——文档对象模型"></a><strong>DOM——文档对象模型</strong></h4><pre><code>​        **文档对象模型**（DocumentObject Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）</code></pre></li><li><h4 id="BOM——浏览器对象模型"><a href="#BOM——浏览器对象模型" class="headerlink" title="BOM——浏览器对象模型"></a><strong>BOM——浏览器对象模型</strong></h4><pre><code>​        **浏览器对象模型**(Browser Object Model，简称BOM) 是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</code></pre></li></ol><h3 id="3-6-JS-初体验"><a href="#3-6-JS-初体验" class="headerlink" title="3.6 JS 初体验"></a>3.6 JS 初体验</h3><pre><code>JS 有3种书写位置，分别为行内、内嵌和外部。</code></pre><ol><li><p>行内式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我试试&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;Hello World&#x27;)&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><ul><li>可以将单行或少量 JS 代码写在HTML标签的事件属性中（以 on 开头的属性），如：onclick</li><li>注意单双引号的使用：在HTML中我们推荐使用双引号, JS 中我们推荐使用单引号</li><li>可读性差， 在html中编写JS大量代码时，不方便阅读；</li><li>引号易错，引号多层嵌套匹配时，非常容易弄混；</li><li>特殊情况下使用</li></ul></li><li><p>内嵌式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    alert(<span class="hljs-string">&#x27;Hello  World~!&#x27;</span>);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>可以将多行JS代码写到 script 标签中</li><li>内嵌 JS 是学习时常用的方式</li></ul></li><li><p>外部JS文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;my.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>利于HTML页面代码结构化，把大段 JS代码独立到 HTML 页面之外，既美观，也方便文件级别的复用</li><li>引用外部 JS文件的 script 标签中间不可以写代码</li><li>适合于JS 代码量比较大的情况</li></ul></li></ol><h2 id="4-JavaScript注释"><a href="#4-JavaScript注释" class="headerlink" title="4 - JavaScript注释"></a>4 - JavaScript注释</h2><ul><li>flex子项目占的份数</li><li>align-self控制子项自己在侧轴的排列方式</li><li>order属性定义子项的排列顺序（前后顺序）</li></ul><h3 id="4-1-单行注释"><a href="#4-1-单行注释" class="headerlink" title="4.1  单行注释"></a>4.1  单行注释</h3><pre><code>为了提高代码的可读性，JS与CSS一样，也提供了注释功能。JS中的注释主要有两种，分别是 单行注释 和 多行注释。</code></pre><p>单行注释的注释方式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">// 我是一行文字，不想被 JS引擎 执行，所以 注释起来<br></code></pre></td></tr></table></figure><pre><code>// 用来注释单行文字（  快捷键   ctrl  +  /   ）</code></pre><h3 id="4-2-多行注释"><a href="#4-2-多行注释" class="headerlink" title="4.2 多行注释"></a>4.2 多行注释</h3><p>多行注释的注释方式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">/*<br>  获取用户年龄和姓名<br>  并通过提示框显示出来<br>*/<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/* */</span>  用来注释多行文字（ 默认快捷键  alt +  shift  + a ） <br></code></pre></td></tr></table></figure><p>快捷键修改为：   ctrl + shift  +  /</p><p>vscode → 首选项按钮 → 键盘快捷方式 → 查找 原来的快捷键 → 修改为新的快捷键 → 回车确认</p><h2 id="5-JavaScript输入输出语句"><a href="#5-JavaScript输入输出语句" class="headerlink" title="5 - JavaScript输入输出语句"></a>5 - JavaScript输入输出语句</h2><p>为了方便信息的输入输出，JS中提供了一些输入输出语句，其常用的语句如下：</p><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg)</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info)</td><td>浏览器弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table><ul><li>注意：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己看运行时的消息。</li></ul><h2 id="6-变量的概念"><a href="#6-变量的概念" class="headerlink" title="6 - 变量的概念"></a>6 - 变量的概念</h2><h3 id="6-1-什么是变量"><a href="#6-1-什么是变量" class="headerlink" title="6.1 什么是变量"></a>6.1 什么是变量</h3><p>白话：变量就是一个装东西的盒子。</p><p>通俗：变量是用于存放数据的容器。 我们通过 变量名 获取数据，甚至数据可以修改。<br><img src="images%5C%E5%9B%BE%E7%89%8713.png"></p><h3 id="6-2-变量在内存中的存储"><a href="#6-2-变量在内存中的存储" class="headerlink" title="6.2 变量在内存中的存储"></a>6.2 变量在内存中的存储</h3><pre><code>    本质：变量是程序在内存中申请的一块用来存放数据的空间。类似我们酒店的房间，一个房间就可以看做是一个变量。  </code></pre><p><img src="images%5C%E5%9B%BE%E7%89%8714.png"></p><h2 id="7-变量的使用"><a href="#7-变量的使用" class="headerlink" title="7 - 变量的使用"></a>7 - 变量的使用</h2><ul><li>变量的声明   </li><li>变量的赋值 </li></ul><h3 id="7-1-声明变量"><a href="#7-1-声明变量" class="headerlink" title="7.1 声明变量"></a>7.1 声明变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//  声明变量  </span><br><span class="hljs-keyword">var</span> age; <span class="hljs-comment">//  声明一个 名称为age 的变量     </span><br></code></pre></td></tr></table></figure><ul><li><p>var 是一个 JS关键字，用来声明变量( variable 变量的意思 )。使用该关键字声明变量后，计算机会自动为变量分配内存空间，不需要程序员管</p></li><li><p>age 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</p></li></ul><h3 id="7-2-赋值"><a href="#7-2-赋值" class="headerlink" title="7.2 赋值"></a>7.2 赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">age = <span class="hljs-number">10</span>; <span class="hljs-comment">// 给 age  这个变量赋值为 10          </span><br></code></pre></td></tr></table></figure><ul><li>= 用来把右边的值赋给左边的变量空间中   此处代表赋值的意思</li><li>变量值是程序员保存到变量空间里的值</li></ul><h3 id="7-3-变量的初始化"><a href="#7-3-变量的初始化" class="headerlink" title="7.3 变量的初始化"></a>7.3 变量的初始化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> age  = <span class="hljs-number">18</span>;  <span class="hljs-comment">// 声明变量同时赋值为 18</span><br><span class="hljs-comment">// 声明一个变量并赋值， 我们称之为变量的初始化。</span><br></code></pre></td></tr></table></figure><h3 id="7-4-变量语法扩展"><a href="#7-4-变量语法扩展" class="headerlink" title="7.4 变量语法扩展"></a>7.4 变量语法扩展</h3><ul><li><p>更新变量</p><p>​        一个变量被重新复赋值后，它原有的值就会被覆盖，变量值将以最后一次赋的值为准。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>;<br><br>age = <span class="hljs-number">81</span>;   <span class="hljs-comment">// 最后的结果就是81因为18 被覆盖掉了          </span><br></code></pre></td></tr></table></figure></li><li><p>同时声明多个变量</p><p>​        同时声明多个变量时，只需要写一个 var， 多个变量名之间使用英文逗号隔开。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>,  name = <span class="hljs-string">&#x27;zs&#x27;</span>, sex = <span class="hljs-number">2</span>;       <br></code></pre></td></tr></table></figure></li><li><p>声明变量特殊情况</p><table><thead><tr><th>情况</th><th>说明</th><th>结果</th></tr></thead><tbody><tr><td>var  age ; console.log (age);</td><td>只声明 不赋值</td><td>undefined</td></tr><tr><td>console.log(age)</td><td>不声明 不赋值  直接使用</td><td>报错</td></tr><tr><td>age   = 10; console.log (age);</td><td>不声明   只赋值</td><td>10</td></tr></tbody></table></li></ul><h3 id="7-5-变量命名规范"><a href="#7-5-变量命名规范" class="headerlink" title="7.5 变量命名规范"></a>7.5 变量命名规范</h3><p>规则：</p><ul><li>由字母(A-Za-z)、数字(0-9)、下划线(_)、美元符号( $ )组成，如：usrAge, num01, _name</li><li>严格区分大小写。var app; 和 var App; 是两个变量</li><li>不能 以数字开头。  18age   是错误的</li><li>不能 是关键字、保留字。例如：var、for、while</li><li>变量名必须有意义。 MMD   BBD        nl   →     age  </li><li>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。myFirstName<img src="images%5C%E5%9B%BE%E7%89%8715.png"></li></ul><p>推荐翻译网站： 有道    爱词霸</p><h2 id="8-数据类型"><a href="#8-数据类型" class="headerlink" title="8 - 数据类型"></a>8 - 数据类型</h2><h3 id="8-1-数据类型简介"><a href="#8-1-数据类型简介" class="headerlink" title="8.1 数据类型简介"></a>8.1 数据类型简介</h3><ul><li><p>为什么需要数据类型</p><pre><code>​        在计算机中，不同的数据所需占用的存储空间是不同的，为了便于把数据分成所需内存大小不同的数据，充分利用存储空间，于是定义了不同的数据类型。      简单来说，数据类型就是数据的类别型号。比如姓名“张三”，年龄18，这些数据的类型是不一样的。</code></pre></li><li><p>变量的数据类型</p><pre><code>​        变量是用来存储值的所在处，它们有名字和数据类型。变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中。JavaScript 是一种弱类型或者说动态语言。这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定：</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>;        <span class="hljs-comment">// 这是一个数字型</span><br><span class="hljs-keyword">var</span> areYouOk = <span class="hljs-string">&#x27;是的&#x27;</span>;   <span class="hljs-comment">// 这是一个字符串     </span><br></code></pre></td></tr></table></figure><p>​        在代码运行时，变量的数据类型是由 JS引擎 根据 = 右边变量值的数据类型来判断 的，运行完毕之后， 变量就确定了数据类型。JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> x = <span class="hljs-number">6</span>;           <span class="hljs-comment">// x 为数字</span><br>  <span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;Bill&quot;</span>;      <span class="hljs-comment">// x 为字符串    </span><br></code></pre></td></tr></table></figure></li><li><p>数据类型的分类</p><pre><code>JS 把数据类型分为两类：</code></pre><ul><li><p>简单数据类型 （Number,String,Boolean,Undefined,Null）</p></li><li><p>复杂数据类型 （object)    </p></li></ul></li></ul><h3 id="8-2-简单数据类型"><a href="#8-2-简单数据类型" class="headerlink" title="8.2 简单数据类型"></a>8.2 简单数据类型</h3><p>简单数据类型（基本数据类型）</p><p>JavaScript 中的简单数据类型及其说明如下：</p><p><img src="images%5C%E5%9B%BE%E7%89%8716.png"></p><ul><li><p>数字型 Number</p><p>​        JavaScript 数字类型既可以保存整数，也可以保存小数(浮点数）。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> age = <span class="hljs-number">21</span>;       <span class="hljs-comment">// 整数</span><br><span class="hljs-keyword">var</span> Age = <span class="hljs-number">21.3747</span>;  <span class="hljs-comment">// 小数     </span><br></code></pre></td></tr></table></figure><ol><li><p>数字型进制</p><p>最常见的进制有二进制、八进制、十进制、十六进制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 1.八进制数字序列范围：0~7</span><br><span class="hljs-keyword">var</span> num1 = <span class="hljs-number">07</span>;   <span class="hljs-comment">// 对应十进制的7</span><br><span class="hljs-keyword">var</span> num2 = <span class="hljs-number">019</span>;  <span class="hljs-comment">// 对应十进制的19</span><br><span class="hljs-keyword">var</span> num3 = <span class="hljs-number">08</span>;   <span class="hljs-comment">// 对应十进制的8</span><br> <span class="hljs-comment">// 2.十六进制数字序列范围：0~9以及A~F</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">0xA</span>;   <br></code></pre></td></tr></table></figure><p>现阶段我们只需要记住，在JS中八进制前面加0，十六进制前面加 0x  </p></li><li><p>数字型范围</p><p>JavaScript中数值的最大和最小值</p><ul><li><p>最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</p></li><li><p>最小值：Number.MIN_VALUE，这个值为：5e-32</p></li></ul></li></ol></li></ul><ol start="3"><li><p>数字型三个特殊值</p><ul><li><p>Infinity ，代表无穷大，大于任何数值</p></li><li><p>-Infinity ，代表无穷小，小于任何数值</p></li><li><p>NaN ，Not a number，代表一个非数值</p></li></ul></li><li><p>isNaN</p><p>用来判断一个变量是否为非数字的类型，返回 true 或者 false</p><p><img src="images%5C%E5%9B%BE%E7%89%8717.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-keyword">var</span> usrAge = <span class="hljs-number">21</span>;<br><span class="hljs-keyword">var</span> isOk = <span class="hljs-built_in">isNaN</span>(userAge);<br>  <span class="hljs-built_in">console</span>.log(isNum);          <span class="hljs-comment">// false ，21 不是一个非数字</span><br><span class="hljs-keyword">var</span> usrName = <span class="hljs-string">&quot;andy&quot;</span>;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(userName));<span class="hljs-comment">// true ，&quot;andy&quot;是一个非数字</span><br></code></pre></td></tr></table></figure></li></ol><ul><li><p>字符串型 String</p><p>​        字符串型可以是引号中的任意文本，其语法为 双引号 “” 和 单引号’’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> strMsg = <span class="hljs-string">&quot;我爱北京天安门~&quot;</span>;  <span class="hljs-comment">// 使用双引号表示字符串</span><br><span class="hljs-keyword">var</span> strMsg2 = <span class="hljs-string">&#x27;我爱吃猪蹄~&#x27;</span>;    <span class="hljs-comment">// 使用单引号表示字符串</span><br><span class="hljs-comment">// 常见错误</span><br><span class="hljs-keyword">var</span> strMsg3 = 我爱大肘子;       <span class="hljs-comment">// 报错，没使用引号，会被认为是js代码，但js没有这些语法</span><br></code></pre></td></tr></table></figure><p>​        因为 HTML 标签里面的属性使用的是双引号，JS 这里我们更推荐使用单引号。</p><ol><li><p>字符串引号嵌套</p><p>​        JS 可以用单引号嵌套双引号 ，或者用双引号嵌套单引号 (外双内单，外单内双)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> strMsg = <span class="hljs-string">&#x27;我是&quot;高帅富&quot;程序猿&#x27;</span>;   <span class="hljs-comment">// 可以用&#x27;&#x27;包含&quot;&quot;</span><br><span class="hljs-keyword">var</span> strMsg2 = <span class="hljs-string">&quot;我是&#x27;高帅富&#x27;程序猿&quot;</span>;  <span class="hljs-comment">// 也可以用&quot;&quot; 包含&#x27;&#x27;</span><br><span class="hljs-comment">//  常见错误</span><br><span class="hljs-keyword">var</span> badQuotes = <span class="hljs-string">&#x27;What on earth?&quot;; // 报错，不能 单双引号搭配</span><br></code></pre></td></tr></table></figure></li><li><p>字符串转义符</p><p>​        类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。</p><p>​        转义符都是 \ 开头的，常用的转义符及其说明如下：</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td>\n</td><td>换行符，n   是   newline   的意思</td></tr><tr><td>\ \</td><td>斜杠   \</td></tr><tr><td>&#39;</td><td>‘   单引号</td></tr><tr><td>&quot;</td><td>”双引号</td></tr><tr><td>\t</td><td>tab  缩进</td></tr><tr><td>\b</td><td>空格 ，b   是   blank  的意思</td></tr></tbody></table></li><li><p>字符串长度</p><pre><code>​        字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 length 属性可以获取整个字符串的长度。</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> strMsg = <span class="hljs-string">&quot;我是帅气多金的程序猿！&quot;</span>;<br>alert(strMsg.length); <span class="hljs-comment">// 显示 11</span><br></code></pre></td></tr></table></figure></li><li><p>字符串拼接</p><ul><li><p>多个字符串之间可以使用 + 进行拼接，其拼接方式为 <strong>字符串 + 任何类型 = 拼接之后的新字符串</strong></p></li><li><p>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1.1 字符串 &quot;相加&quot;</span><br>alert(<span class="hljs-string">&#x27;hello&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-string">&#x27;world&#x27;</span>); <span class="hljs-comment">// hello world</span><br><span class="hljs-comment">//1.2 数值字符串 &quot;相加&quot;</span><br>alert(<span class="hljs-string">&#x27;100&#x27;</span> + <span class="hljs-string">&#x27;100&#x27;</span>); <span class="hljs-comment">// 100100</span><br><span class="hljs-comment">//1.3 数值字符串 + 数值</span><br>alert(<span class="hljs-string">&#x27;11&#x27;</span> + <span class="hljs-number">12</span>);     <span class="hljs-comment">// 1112 </span><br></code></pre></td></tr></table></figure><ul><li><strong><em>+ 号总结口诀：数值相加 ，字符相连</em></strong></li></ul></li></ul></li><li><p>字符串拼接加强</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;pink老师&#x27;</span> + <span class="hljs-number">18</span>);        <span class="hljs-comment">// 只要有字符就会相连 </span><br><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;pink老师age岁啦&#x27;</span>);      <span class="hljs-comment">// 这样不行哦</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;pink老师&#x27;</span> + age);         <span class="hljs-comment">// pink老师18</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;pink老师&#x27;</span> + age + <span class="hljs-string">&#x27;岁啦&#x27;</span>); <span class="hljs-comment">// pink老师18岁啦</span><br></code></pre></td></tr></table></figure><ul><li>经常会将字符串和变量来拼接，变量可以很方便地修改里面的值</li><li>变量是不能添加引号的，因为加引号的变量会变成字符串</li><li>如果变量两侧都有字符串拼接，口诀“引引加加 ”，删掉数字，变量写加中间</li></ul></li></ol></li><li><p>布尔型Boolean</p><p>​        布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</p><p>​        布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> + <span class="hljs-number">1</span>);  <span class="hljs-comment">// 2</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">false</span> + <span class="hljs-number">1</span>); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure></li><li><p>Undefined和 Null</p><p>​        一个声明后没有被赋值的变量会有一个默认值undefined ( 如果进行相连或者相加时，注意结果）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> variable;<br><span class="hljs-built_in">console</span>.log(variable);           <span class="hljs-comment">// undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;你好&#x27;</span> + variable);  <span class="hljs-comment">// 你好undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">11</span> + variable);     <span class="hljs-comment">// NaN</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> + variable);   <span class="hljs-comment">//  NaN</span><br></code></pre></td></tr></table></figure><p>​        一个声明变量给 null 值，里面存的值为空（学习对象时，我们继续研究null)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> vari = <span class="hljs-literal">null</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;你好&#x27;</span> + vari);  <span class="hljs-comment">// 你好null</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">11</span> + vari);     <span class="hljs-comment">// 11</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> + vari);   <span class="hljs-comment">//  1</span><br></code></pre></td></tr></table></figure><h3 id="8-3-获取变量数据类型"><a href="#8-3-获取变量数据类型" class="headerlink" title="8.3 获取变量数据类型"></a>8.3 获取变量数据类型</h3></li><li><p>获取检测变量的数据类型</p><p>​        typeof 可用来获取检测变量的数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = <span class="hljs-number">18</span>;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> num) <span class="hljs-comment">// 结果 number      </span><br></code></pre></td></tr></table></figure><p>​        不同类型的返回值</p><p><img src="images%5C%E5%9B%BE%E7%89%8718.png"></p></li><li><p>字面量</p><p>​        字面量是在源代码中一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p><ul><li>数字字面量：8, 9, 10</li><li>字符串字面量：’黑马程序员’, “大前端”</li><li>布尔字面量：true，false</li></ul></li></ul><h3 id="8-4-数据类型转换"><a href="#8-4-数据类型转换" class="headerlink" title="8.4 数据类型转换"></a>8.4 数据类型转换</h3><p>​        什么是数据类型转换？</p><p>​        使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，就是把一种数据类型的变量转换成另一种数据类型，通常会实现3种方式的转换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">转换为字符串类型<br>转换为数字型<br>转换为布尔型<br></code></pre></td></tr></table></figure><ul><li><p>转换为字符串</p><p><img src="images%5C%E5%9B%BE%E7%89%8719.png"></p><ul><li>toString() 和 String()  使用方式不一样。</li><li>三种转换方式，更多第三种加号拼接字符串转换方式， 这一种方式也称之为隐式转换。</li></ul></li><li><p>转换为数字型（重点）</p><p><img src="images%5C%E5%9B%BE%E7%89%8720.png"></p><ul><li>注意 parseInt 和 parseFloat 单词的大小写，这2个是重点</li><li>隐式转换是我们在进行算数运算的时候，JS 自动转换了数据类型</li></ul></li><li><p>转换为布尔型</p><p><img src="images%5C%E5%9B%BE%E7%89%8721.png"></p><ul><li><p>代表空、否定的值会被转换为 false  ，如 ‘’、0、NaN、null、undefined  </p></li><li><p>其余值都会被转换为 true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;&#x27;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">0</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">NaN</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">null</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">undefined</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&#x27;小白&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">12</span>)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="9-解释型语言和编译型语言"><a href="#9-解释型语言和编译型语言" class="headerlink" title="9 - 解释型语言和编译型语言"></a>9 - 解释型语言和编译型语言</h2><h3 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h3><pre><code>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言才能执行程序。程序语言翻译成机器语言的工具，被称为翻译器。</code></pre><p><img src="images%5C%E5%9B%BE%E7%89%8722.png"></p><ul><li> 翻译器翻译的方式有两种：一个是编译，另外一个是解释。两种方式之间的区别在于翻译的时间点不同</li><li> 编译器是在代码执行之前进行编译，生成中间代码文件</li><li> 解释器是在运行时进行及时解释，并立即执行(当编译器以解释方式运行的时候，也称之为解释器)</li></ul><h3 id="9-2-执行过程"><a href="#9-2-执行过程" class="headerlink" title="9.2 执行过程"></a>9.2 执行过程</h3><p><img src="images%5C%E5%9B%BE%E7%89%8723.png"></p><pre><code>类似于请客吃饭：    编译语言：首先把所有菜做好，才能上桌吃饭    解释语言：好比吃火锅，边吃边涮，同时进行</code></pre><h2 id="10-关键字和保留字"><a href="#10-关键字和保留字" class="headerlink" title="10 - 关键字和保留字"></a>10 - 关键字和保留字</h2><h3 id="10-1-标识符"><a href="#10-1-标识符" class="headerlink" title="10.1 标识符"></a>10.1 标识符</h3><pre><code>标识(zhi)符：就是指开发人员为变量、属性、函数、参数取的名字。标识符不能是关键字或保留字。</code></pre><h3 id="10-2-关键字"><a href="#10-2-关键字" class="headerlink" title="10.2 关键字"></a>10.2 关键字</h3><pre><code>关键字：是指 JS本身已经使用了的字，不能再用它们充当变量名、方法名。包括：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。</code></pre><h3 id="10-3-保留字"><a href="#10-3-保留字" class="headerlink" title="10.3 保留字"></a>10.3 保留字</h3><pre><code>保留字：实际上就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不能使用它们当变量名或方法名。包括：boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。注意：如果将保留字用作变量名或函数名，那么除非将来的浏览器实现了该保留字，否则很可能收不到任何错误消息。当浏览器将其实现后，该单词将被看做关键字，如此将出现关键字错误。</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
